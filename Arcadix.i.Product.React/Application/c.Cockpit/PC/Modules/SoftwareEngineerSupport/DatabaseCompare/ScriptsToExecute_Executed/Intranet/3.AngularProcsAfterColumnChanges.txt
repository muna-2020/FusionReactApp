ALTER procedure [dbo].[JProc_Testdrive_Interpretation_SaveTopic]          
(            
 @uFeedbackThresholdTopicId uniqueidentifier,        
 @uSubjectFeedbackThresholdId uniqueidentifier,        
 @TopicText nvarchar(1000),        
 @LanguageId int,        
 @uUserId uniqueidentifier,        
 @iMainClientId int        
)          
AS           
BEGIN         
 if(@uFeedbackThresholdTopicId = '00000000-0000-0000-0000-000000000000')            
 BEGIN        
  set @uFeedbackThresholdTopicId = NEWID();        
  declare @iOrder int      
  select @iOrder = isnull((MAX(iorder)),1)  from t_testdrive_Subject_FeedbackThreshold_Topic where uSubjectFeedbackThresholdId = @uFeedbackThresholdTopicId        
  insert into t_testdrive_Subject_FeedbackThreshold_Topic(uFeedbackThresholdTopicId, uSubjectFeedbackThresholdId, iOrder, cIsDeleted, uUserId, dtCreatedOn, dtModifiedOn)  
  values(@uFeedbackThresholdTopicId,@uSubjectFeedbackThresholdId,@iOrder,'N',@uUserId,GETDATE(),GETDATE())        
  insert into t_testdrive_Subject_FeedbackThreshold_Topic_Data values(NEWID(),@uFeedbackThresholdTopicId,@LanguageId,@TopicText);        
 END        
 ELSE        
 BEGIN        
  update t_testdrive_Subject_FeedbackThreshold_Topic_Data set vFeedbackThresholdTopic = @TopicText where uFeedbackThresholdTopicId = @uFeedbackThresholdTopicId        
 END        
        
 SELECT(            
 SELECT OFTD.uSubjectFeedbackThresholdId,            
  OFTD.vThresholdHeading,          
  OFTD.vThresholdText,          
  OFTD.iLanguageId,          
  OFTD.vThresholdTextFeedback,          
  OFT.iSubjectId,          
  OFT.cIsDeleted,          
  OFT.iSegmentNumber,            
  ISNULL((SELECT FTT.uFeedbackThresholdTopicId,            
    FT.uSubjectFeedbackThresholdId,            
    FTT.iOrder,            
    FTT.cIsDeleted,            
    FTTD.iLanguageId,          
 FTTD.vFeedbackThresholdTopic FROM t_testdrive_Subject_FeedbackThreshold_Topic FTT             
    JOIN t_TestDrive_Subject_FeedbackThreshold FT ON FT.uSubjectFeedbackThresholdId = FTT.uSubjectFeedbackThresholdId          
    JOIN t_testdrive_Subject_FeedbackThreshold_Topic_Data FTTD ON FTTD.uFeedbackThresholdTopicId = FTT.uFeedbackThresholdTopicId          
    WHERE FT.iMainClientId = @iMainClientId and FTT.cIsDeleted = 'N' and FT.cIsDeleted = 'N' and FT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId  for json path, include_null_values),'[]') [FeedbackThresholdTopic],            
            
  isnull((select           
 FTTD.uFeedbackThresholdTopicDescriptionId,          
 FTTD.uFeedbackThresholdTopicId,          
 FTTDD.iLanguageId,          
 FTTDD.vFeedbackThresholdTopicDescription,        
 FTTD.iOrder          
from           
 t_testdrive_Subject_FeedbackThreshold_Topic_Description FTTD           
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic_Description_Data FTTDD ON FTTD.uFeedbackThresholdTopicDescriptionId = FTTDD.uFeedbackThresholdTopicDescriptionId          
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic FTT ON FTTD.uFeedbackThresholdTopicId = FTT.uFeedbackThresholdTopicId          
 JOIN t_testdrive_Subject_FeedbackThreshold FT ON FT.uSubjectFeedbackThresholdId = FTT.uSubjectFeedbackThresholdId           
 WHERE FT.iMainClientId = @iMainClientId and FT.cIsDeleted = 'N' and FTTD.cIsDeleted = 'N' and FT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId  order by FTTD.iOrder for json path, include_null_values),'[]') [FeedbackThresholdTopicDescript
  
    
ion],                 
            
  isnull((select          
  FTD.uFeedbackThresholdTopicDescriptionId,          
  FTTDT.uFeedbackThresholdTopicDescriptionTaskId,          
  FTTDT.cIsDeleted,          
  FTTDT.iOrder,          
  FTTDT.iTaskId,          
  FTTDT.vTaskName          
  from t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks FTTDT          
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic_Description FTD ON FTD.uFeedbackThresholdTopicDescriptionId = FTTDT.uFeedbackThresholdTopicDescriptionId          
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic FTT ON FTT.uFeedbackThresholdTopicId = FTD.uFeedbackThresholdTopicId          
 JOIN t_testdrive_Subject_FeedbackThreshold FT ON FT.uSubjectFeedbackThresholdId = FTT.uSubjectFeedbackThresholdId          
 WHERE FT.iMainClientId = @iMainClientId and FT.cIsDeleted = 'N' and FTD.cIsDeleted = 'N' and FT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId for json path, include_null_values),'[]') [FeedbackThresholdTopicDescriptionTask]            
                
   FOR JSON PATH,INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER) as JSONResult FROM t_testdrive_Subject_FeedbackThreshold OFT            
    JOIN t_TestDrive_Subject_FeedbackThreshold_Data OFTD on OFTD.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId          
    --JOIN t_testdrive_Subject_FeedbackThreshold_Topic OFTT ON OFTT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId          
   WHERE OFT.iMainClientId = @iMainClientId and OFT.uSubjectFeedbackThresholdId = @uSubjectFeedbackThresholdId          
END

GO 

ALTER procedure [dbo].[JProc_Testdrive_Interpretation_SaveTopicDescription]                      
(                        
 @uFeedbackThresholdTopicDescriptionId uniqueidentifier,                    
 @uFeedbackThresholdTopicId uniqueidentifier,                    
 @TopicDescriptionText nvarchar(max),                    
 @LanguageId int,                    
 @uUserId uniqueidentifier,                    
 @TaskJson nvarchar(max),                    
 @iMainClientId int,                    
 @uSubjectFeedbackThresholdId uniqueidentifier,                    
 @iOrder int                    
)                      
AS                       
BEGIN                     
                    
 if(@uFeedbackThresholdTopicDescriptionId = '00000000-0000-0000-0000-000000000000')                        
 BEGIN                    
  set @uFeedbackThresholdTopicDescriptionId = NEWID();                    
  insert into t_testdrive_Subject_FeedbackThreshold_Topic_Description(uFeedbackThresholdTopicDescriptionId, uFeedbackThresholdTopicId, cIsDeleted, uUserId, dtCreatedOn, dtModifiedOn, iOrder)    
  values(@uFeedbackThresholdTopicDescriptionId,@uFeedbackThresholdTopicId,'N',@uUserId,GETDATE(),GETDATE(),@iOrder)                    
  insert into t_testdrive_Subject_FeedbackThreshold_Topic_Description_Data values(NEWID(),@uFeedbackThresholdTopicDescriptionId,@LanguageId,@TopicDescriptionText);                    
 END                    
 ELSE                    
 BEGIN                    
  update t_testdrive_Subject_FeedbackThreshold_Topic_Description_Data set vFeedbackThresholdTopicDescription = @TopicDescriptionText where uFeedbackThresholdTopicDescriptionId = @uFeedbackThresholdTopicDescriptionId                    
 END                    
                    
                    
 declare @uFeedbackThresholdTopicDescriptionTaskId uniqueidentifier,@iTaskId int,@iOrderId int,@vTaskName nvarchar(1000),@vTempTaskName nvarchar(1000)                  
 declare cursor_SaveTask Cursor For                                              
    Select * from OPENJSON(@TaskJson)                    
    with(uFeedbackThresholdTopicDescriptionTaskId uniqueidentifier,iTaskId int,iOrderId int,vTaskName nvarchar(1000))                     
 open cursor_SaveTask                    
                    
 Fetch Next from cursor_SaveTask into @uFeedbackThresholdTopicDescriptionTaskId,@iTaskId, @iOrderId, @vTaskName                    
                    
 while(@@FETCH_STATUS <> -1)                    
 BEGIN                    
  if(exists(select * from t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks where uFeedbackThresholdTopicDescriptionTaskId = @uFeedbackThresholdTopicDescriptionTaskId))                    
  BEGIN               
   if(@vTaskName = '')              
   Begin              
     delete t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks where uFeedbackThresholdTopicDescriptionTaskId = @uFeedbackThresholdTopicDescriptionTaskId              
   End                     
   Else if(exists(select * from t_CMS_Page where vPageName = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId))                    
   BEGIN                    
    select @iTaskId = iPageId from t_CMS_Page where vPageName = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId                   
    update t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks set iTaskId = @iTaskId, vTaskName = @vTaskName where uFeedbackThresholdTopicDescriptionTaskId = @uFeedbackThresholdTopicDescriptionTaskId                    
   END                    
    Else if(exists(select * from t_CMS_Page where iPageId = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId))                  
   Begin                  
           select @iTaskId = iPageId,@vTempTaskName = vPageName from t_CMS_Page where iPageId = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId                   
    update t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks set iTaskId = @iTaskId, vTaskName = @vTempTaskName where uFeedbackThresholdTopicDescriptionTaskId = @uFeedbackThresholdTopicDescriptionTaskId                   
   End                  
  END                     
  ELSE                    
  BEGIN                    
   if(exists(select * from t_CMS_Page where vPageName = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId))                    
   BEGIN                    
    select @iTaskId = iPageId from t_CMS_Page where vPageName = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId                   
    insert into t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks values(NEWID(),@uFeedbackThresholdTopicDescriptionId,@iTaskId,@iOrderId,'N',@vTaskName)                   
   END                   
    Else if(exists(select * from t_CMS_Page where iPageId = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId))                  
   Begin                  
        select @iTaskId = iPageId,@vTempTaskName = vPageName from t_CMS_Page where iPageId = @vTaskName and cIsDeleted = 'N' AND iMainClientId = @iMainClientId                   
    insert into t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks values(NEWID(),@uFeedbackThresholdTopicDescriptionId,@iTaskId,@iOrderId,'N',@vTempTaskName)                      
   End                     
END                                      
  Fetch Next from cursor_SaveTask into @uFeedbackThresholdTopicDescriptionTaskId,@iTaskId, @iOrderId, @vTaskName                    
 END                    
 Close cursor_SaveTask                                      
 Deallocate cursor_SaveTask                    
                    
 SELECT(                        
 SELECT OFTD.uSubjectFeedbackThresholdId,                        
  OFTD.vThresholdHeading,                  
  OFTD.vThresholdText,                      
  OFTD.iLanguageId,                      
  OFTD.vThresholdTextFeedback,                      
  OFT.iSubjectId,                      
  OFT.cIsDeleted,                      
  OFT.iSegmentNumber,                        
  ISNULL((SELECT FTT.uFeedbackThresholdTopicId,                        
    FT.uSubjectFeedbackThresholdId,                        
    FTT.iOrder,                        
    FTT.cIsDeleted,                        
    FTTD.iLanguageId,                      
 FTTD.vFeedbackThresholdTopic FROM t_testdrive_Subject_FeedbackThreshold_Topic FTT                         
    JOIN t_TestDrive_Subject_FeedbackThreshold FT ON FT.uSubjectFeedbackThresholdId = FTT.uSubjectFeedbackThresholdId                      
    JOIN t_testdrive_Subject_FeedbackThreshold_Topic_Data FTTD ON FTTD.uFeedbackThresholdTopicId = FTT.uFeedbackThresholdTopicId                      
    WHERE FT.iMainClientId = @iMainClientId and FTT.cIsDeleted = 'N' and FT.cIsDeleted = 'N' and FT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId for json path, include_null_values),'[]') [FeedbackThresholdTopic],                        
                        
  isnull((select                       
 FTTD.uFeedbackThresholdTopicDescriptionId,                      
 FTTD.uFeedbackThresholdTopicId,                      
 FTTDD.iLanguageId,                      
 FTTDD.vFeedbackThresholdTopicDescription,                    
FTTD.iOrder                      
from                       
 t_testdrive_Subject_FeedbackThreshold_Topic_Description FTTD                       
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic_Description_Data FTTDD ON FTTD.uFeedbackThresholdTopicDescriptionId = FTTDD.uFeedbackThresholdTopicDescriptionId                      
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic FTT ON FTTD.uFeedbackThresholdTopicId = FTT.uFeedbackThresholdTopicId                      
 JOIN t_testdrive_Subject_FeedbackThreshold FT ON FT.uSubjectFeedbackThresholdId = FTT.uSubjectFeedbackThresholdId                       
 WHERE FT.iMainClientId = @iMainClientId and FT.cIsDeleted = 'N' and FTTD.cIsDeleted = 'N' and FT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId order by FTTD.iOrder for json path, include_null_values),'[]') [FeedbackThresholdTopicDescript 
  
   
ion],                             
             
  isnull((select                      
  FTD.uFeedbackThresholdTopicDescriptionId,                      
  FTTDT.uFeedbackThresholdTopicDescriptionTaskId,                      
  FTTDT.cIsDeleted,                      
  FTTDT.iOrder,                      
  FTTDT.iTaskId,                      
  FTTDT.vTaskName                      
  from t_testdrive_Subject_FeedbackThreshold_Topic_Description_Tasks FTTDT                      
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic_Description FTD ON FTD.uFeedbackThresholdTopicDescriptionId = FTTDT.uFeedbackThresholdTopicDescriptionId                      
 JOIN t_testdrive_Subject_FeedbackThreshold_Topic FTT ON FTT.uFeedbackThresholdTopicId = FTD.uFeedbackThresholdTopicId                      
 JOIN t_testdrive_Subject_FeedbackThreshold FT ON FT.uSubjectFeedbackThresholdId = FTT.uSubjectFeedbackThresholdId                      
 WHERE FT.iMainClientId = @iMainClientId and FT.cIsDeleted = 'N' and FTD.cIsDeleted = 'N' and FT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId for json path, include_null_values),'[]') [FeedbackThresholdTopicDescriptionTask]               
  
    
      
        
         
                            
   FOR JSON PATH,INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER) as JSONResult FROM t_testdrive_Subject_FeedbackThreshold OFT                        
    JOIN t_TestDrive_Subject_FeedbackThreshold_Data OFTD on OFTD.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId                      
    --JOIN t_testdrive_Subject_FeedbackThreshold_Topic OFTT ON OFTT.uSubjectFeedbackThresholdId = OFT.uSubjectFeedbackThresholdId                      
   WHERE OFT.iMainClientId = @iMainClientId and OFT.uSubjectFeedbackThresholdId = @uSubjectFeedbackThresholdId                     
                    
END

GO 
ALTER proc [Proc_CMS_CMSPAGE_JAddEditTaskProperties]                                  
(                                  
 @vTaskDataXml NTEXT,                                  
 @vAction NVARCHAR(200),                                
 @cEnableTaskNameChangeforlinkedTasks char(1)                                        
)                                  
 AS                                  
 BEGIN  transaction                                  
 DECLARE @h int                                  
    DECLARE @iPageId int,@uUserId uniqueidentifier,@AutoName nvarchar(max),@iMainClientId int,@iMax int                                  
     EXECUTE sp_xml_preparedocument @h OUTPUT, @vTaskDataXml                                  
  select @uUserId = uUserid from OPENXML(@h,'Data',1)with (uUserId uniqueidentifier './uUserId/@value')                                    
 /*** For Basic Properties **/                                  
 select @AutoName = AutoName,@iMainClientId =iMainClientId   from OPENXML(@h,'Data',1) with (AutoName NVARCHAR(2000) './AutoName/@value',iMainClientId int './iMainClientId/@value')                               
 if(@vAction='New')                                  
  BEGIN                                  
   insert into t_CMS_Page(vPageName,vPageDescription,iFolderId,dtCreatedOn,dtModifiedOn,iMainClientId,uUserId,uPageGuid)                                  
                                  
 Select  vPageName,vPageDescription,iFolderId,getdate(),getdate(),iMainClientId,uUserId,NEWID()                                  
 from OPENXML(@h,'Data',1) with (vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',                                
 iFolderId int './iFolderId/@value',dtCreatedOn datetime './dtCreatedOn/@value',                                  
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value')                                  
 set @iPageId = @@IDENTITY                                  
                                     
 insert into t_CMS_PageProperty_TestDrive(iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,                                  
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,                                
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId,iIntermediateId)                                 
                                  
 Select  @iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,                                  
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,                                
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId,iIntermediateId                                
 from OPENXML(@h,'Data',1) with (iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',                                
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',iInputStatusId int './iInputStatusId/@value',                                
 dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value', cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',                  
 iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',                                
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',                                
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',                                
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',                                
 cIsForInternalTesting char(1) './cIsForInternalTesting/@value',cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value',                     
 cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',                    
 iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value',iIntermediateId int './iIntermediateId/@value')                                  
  END                                  
  ELSE                                  
  BEGIN                                  
                                      
 select @iPageId = iPageId from OPENXML(@h,'Data',1)with (iPageId int './iPageId/@value')                                  
                                      
 update T Set T.vPageName = XT.vPageName,T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                                  
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId                                  
 from t_CMS_Page T,OPENXML(@h,'Data',1)                                  
 with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',                                
 dtCreatedOn datetime './dtCreatedOn/@value',                                  
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT                                  
 where T.iPageId = XT.iPageId                                  
                                     
  update TP set TP.iSubjectId = XTP.iSubjectId,TP.iCategoryId = XTP.iCategoryId,TP.cIsCalibratedActive = XTP.cIsCalibratedActive,                                
  TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,                                
  TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,                                  
  TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,                                
  TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,                                
  TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,                                
  TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.iCategoryCompetencyId=XTP.iCategoryCompetencyId                    
  ,TP.cIsAdaptiveTask = XTP.cIsAdaptiveTask,TP.iCategoryCompetencyLevelId = XTP.iCategoryCompetencyLevelId,TP.iCategoryCompetencyRangeId = XTP.iCategoryCompetencyRangeId ,TP.iIntermediateId = XTP.iIntermediateId                     
  from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)                                
  with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',                                
  cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',                                
  iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',                                
  iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',                                
  cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',                                
  iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',                                
  iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',                                
  cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',                    
  cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value',iIntermediateId int './iIntermediateId/@value') XTP            
  
     
      
                     
    where TP.iPageId = XTP.iPageId                                 
                             
 if exists(select * from t_CMS_Page where iShortcutToTaskId=@iPageId)                                
  BEGIN                                
   if(@cEnableTaskNameChangeforlinkedTasks='Y')                                
  Begin                                
   update T Set T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                                  
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value'       
  
    
      
        
          
            
             
 ,iFolderId int './iFolderId/@value',           dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT                          
  
    
      
        
 where T.iShortcutToTaskId = XT.iPageId                                  
 End                                
                                
 Else                                
 BEGIN                                
  update T Set T.vPageName = XT.vPageName, T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                                  
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value'                    
 ,vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',                                
 dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT                             
 where T.iShortcutToTaskId = XT.iPageId                          
 END                                
                                
 update TP set TP.cIsCalibratedActive = XTP.cIsCalibratedActive,                        
 TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,               
 TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,                                  
 TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,                                
 TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,                                
 TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,                                
 TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.                                
 cIsAdaptiveTask = XTP.cIsAdaptiveTask                                
 from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)                               
 with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',                                
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',                                
 iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',                                
 iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',                                
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',                                
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',                                
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',         cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value',                     
 cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',                    
iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value',iIntermediateId int './iIntermediateId/@value') XTP                                  
   where TP.iPageId in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
                                
   /************ Adding Languages For linked tasks**************/                                  
                                
 delete from t_CMS_Page_Language where iPageID in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId)                                
 declare @iNewPageId int                                
 Declare Cur_1 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_1                                
 fetch next from Cur_1 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
  insert into t_CMS_Page_Language select @iNewPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')                                 
 fetch next from Cur_1 into @iNewPageId                                
 end                                
  close Cur_1                                
  deallocate Cur_1                                
                         
/************ End Adding Languages For linked Task**************/                                  
                                
                                
/**********************For Task keyword linked tasks***********/                                  
                    
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
 Declare Cur_2 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_2                                
 fetch next from Cur_2 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                    
  insert into t_Testdrive_Task_AssignedTaskKeyword select @iNewPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')                                  
 fetch next from Cur_2 into @iNewPageId                                
 end                                
  close Cur_2                                
deallocate Cur_2                                
                                     
/**********************End ask keyword linked tasks***********/                                 
                                
/**********************For Assigned Additional Property linked tasks***********/                                  
                                  
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
 Declare Cur_A cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                     
 open Cur_A                                
 fetch next from Cur_A into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
  insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iNewPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')                                  
 fetch next from Cur_A into @iNewPageId                                
 end                                
  close Cur_A                                
  deallocate Cur_A                                
                                     
/**********************End ask keyword linked tasks***********/                                 
                                
/**********************For Task DifficultyLevel for linked tasks***********/                                  
                                  
 delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
 Declare Cur_3 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_3                                
 fetch next from Cur_3 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
   insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iNewPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',TaskDifficultyLevelId int '@TaskDifficultyLevelId')       
  
             
                        
                          
 fetch next from Cur_3 into @iNewPageId                                
 end                                
  close Cur_3        
  deallocate Cur_3                                
                                  
/**********************End Task DifficultyLevel for linked tasks***********/                                 
                                
/**********************For ReviewStatus for linked tasks***********/                                  
                                  
   Declare Cur_4 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_4                                
 fetch next from Cur_4 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
                                  
   declare @iStatusLanguageId1 int,@tChangeRequest1 nvarchar(max),@uReviewStatus1 uniqueidentifier,@vTitle1 nvarchar(max),@iPageDataId1 int                                
    Declare Cur_PageDataStatus1 cursor                                
                                        
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')                                 
 open Cur_PageDataStatus1                                
 Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
                                
 if exists(select * from  t_CMS_Page_Data where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1)                                
 begin                                
  print @iStatusLanguageId1                                
 update t_CMS_Page_Data set vPageTitle = @vTitle1 where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1                                
 select @iPageDataId1 = ipageDataId from t_CMS_Page_Data where iPageID =@iNewPageId and iLanguageID= @iStatusLanguageId1                                
 if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus1 and uUserId =@uUserId and cIsLatest='Y' and iPageDataId=@iPageDataId1)                                
 BEGIN                                
     if(@uReviewStatus1 is not null)                                
   BEGIN                                
                                   
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId1                                
     insert into t_Cms_Page_AssignedWorkflowStatus  (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
  values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')                                  
      END                                
  END                                
 end                                
 else                                
 begin                                
   insert into t_CMS_Page_Data values(@iNewPageId,@iStatusLanguageId1,@vTitle1,null,NULL,NULL,'N',null)                                
  set @iPageDataId1=@@IDENTITY                                
   if(@uReviewStatus1 is not null)                                
   BEGIN                                
       insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
    values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')                               
END                                
 end                                
  Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1                                
  end                                
  close Cur_PageDataStatus1                                
  deallocate Cur_PageDataStatus1                                
                        
 fetch next from Cur_4 into @iNewPageId                                
 end                                
  close Cur_4                                
  deallocate Cur_4                                
                                
/**********************End ReviewStatus for linked tasks***********/                                 
                                
                                
                                
  END                                
                                     
  END                                  
                                    
  /**** Basic Properties End ****/                                  
                                    
/************ Adding Languages For Task**************/                                  
 delete from t_CMS_Page_Language where iPageID=@iPageId                                  
 insert into t_CMS_Page_Language select @iPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')                                  
                                  
/************ End Adding Languages For Task**************/                                  
                                  
                                
/**********************For ReviewStatus***********/                                  
   declare @iStatusLanguageId int,@tChangeRequest nvarchar(max),@uReviewStatus uniqueidentifier,@vTitle nvarchar(max),@iPageDataId int                                
    Declare Cur_PageDataStatus cursor                                
                                        
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')                                 
 open Cur_PageDataStatus                                
 Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
 print @tChangeRequest                                
 if exists(select * from  t_CMS_Page_Data where iPageID = @iPageId and iLanguageID= @iStatusLanguageId)                                
 begin                                
  print @iStatusLanguageId                                
                             
 update t_CMS_Page_Data set vPageTitle = @vTitle where iPageID = @iPageId and iLanguageID= @iStatusLanguageId                                
  select @iPageDataId = ipageDataId from t_CMS_Page_Data where iPageID =@iPageId and iLanguageID= @iStatusLanguageId                                
  if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus and iPageDataId=@iPageDataId and uUserId =@uUserId and cIsLatest='Y')                                
 BEGIN                                
  If(@uReviewStatus is not null)                                
   BEGIN                                
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId                                
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
  values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')                               
      END                  
  END                                
 end                                
 else                                
 begin                                
   insert into t_CMS_Page_Data values(@iPageId,@iStatusLanguageId,@vTitle,null,NULL,NULL,'N',null)                                
  set @iPageDataId=@@IDENTITY                                
   If(@uReviewStatus is not null)                                
   BEGIN                                
         insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
   values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')                                
       END                                
 end                                
  Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle                                
  end                                
  close Cur_PageDataStatus                                
  deallocate Cur_PageDataStatus                                
                                 
                                
/**********************ReviewStatus End***********/                                 
                                
                                
/**********************For Task keyword***********/                                  
                                  
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId=@iPageId                                  
 insert into t_Testdrive_Task_AssignedTaskKeyword select @iPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')                                  
                                  
/**********************Data Task keyword***********/                                 
                                
/**********************For Task Additional Property***********/                                  
                                  
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId=@iPageId                                  
 insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')                                  
                                  
/**********************For Task Additional Property***********/                                 
          
/**********************For Task DifficultyLevel***********/                                  
                                  
  delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId=@iPageId                                  
  insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',                                
  TaskDifficultyLevelId int '@TaskDifficultyLevelId')                                  
                                  
/**********************Data Task DifficultyLevel***********/                                 
                                
/*******************Generate AutoName**************************/                              
                        
 if(@iMainClientId=115 or @iMainClientId = 97)                              
              
 BEGIN                            
 DECLARE @iIndex int                       
 Declare  @vMaxName nvarchar(max)                        
   if(SUBSTRING(@AutoName,1,4)='NMG_')                        
    BEGIN                        
  set @iIndex=12                        
 END                        
   else                        
 BEGIN                        
  set @iIndex=11                        
 END                         
 IF(@vAction='New')                              
 begin                            
                           
                          
IF exists(select *   from t_CMS_PageProperty_TestDrive  PT                              
inner join t_cms_page p on P.iPageId = PT.iPageId                              
where vCustomerTaskId like @AutoName+'_%'  and iMainClientId = @iMainClientId)                      
BEGIN                
                 
                 
 select @iMax = max(Convert(int, SUBSTRING(vCustomerTaskId,@iIndex,len(vCustomerTaskId))))+1 from t_CMS_PageProperty_TestDrive  PT                              
 inner join t_cms_page p on P.iPageId = PT.iPageId                              
 where vCustomerTaskId like @AutoName+'%'                           
                           
                 
                             
 Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_'+CONVERT(nvarchar(50),@iMax) where iPageId = @iPageId                        
 END                           
 ELSE                          
 BEGIN                          
 Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_1' where iPageId = @iPageId                             
 END                END       
       
                            
 ELSE                             
 BEGIN                              
 declare @vCus nvarchar(max)                              
 select @vCus =vCustomerTaskId  from t_CMS_PageProperty_TestDrive where iPageId = @iPageId                              
 if exists(select *   from t_CMS_PageProperty_TestDrive where vCustomerTaskId like @AutoName+'_%'  and iPageId = @iPageId)                      
 BEGIN                      
 Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_'+SUBSTRING(@vCus, @iIndex,len(@vCus)) where iPageId = @iPageId                              
 END                      
 ELSE                      
  BEGIN                      
 if exists(select *   from t_CMS_PageProperty_TestDrive  PT                              
 inner join t_cms_page p on P.iPageId = PT.iPageId                              
 where vCustomerTaskId like @AutoName+'_%'  and iMainClientId = @iMainClientId)                          
 BEGIN                          
   select @iMax = max(Convert(int, SUBSTRING(vCustomerTaskId,@iIndex,len(vCustomerTaskId))))+1 from t_CMS_PageProperty_TestDrive  PT                              
 inner join t_cms_page p on P.iPageId = PT.iPageId                              
 where vCustomerTaskId like @AutoName+'%'                            
                             
  Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_'+CONVERT(nvarchar(50),@iMax) where iPageId = @iPageId                              
  END                           
  ELSE                          
  BEGIN                          
  Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_1' where iPageId = @iPageId                             
  END                      
 END                      
 END                              
                                 
 END                              
                             
/**************************************************************/                              
                              
 SELECT  P.*,                                                  
 PD.*,                                                  
 PP.*,                                                  
 PIS.* ,                                
 AW.uWorkflowStatusId,AW.cIsLatest                                              
 FROM    t_CMS_Page P                                                  
 LEFT OUTER JOIN t_CMS_Page_Data PD ON P.iPageId = PD.iPageId                                
 LEFT OUTER JOIN t_CMS_PageProperty_TestDrive PP ON P.iPageId = PP.iPageId                                
 LEFT OUTER JOIN t_Cms_Page_AssignedWorkflowStatus AW on AW.iPageDataId = PD.iPageDataID and AW.cIsLatest='Y'                                
 LEFT OUTER JOIN t_TestDrive_InputStatus PIS ON PP.iInputStatusId = PIS.iInputStatusId                                               
 WHERE   P.iPageId = @iPageId                          
 Select * from t_CMS_Page_Language where iPageId = @iPageId                                  
 select * from t_Testdrive_Task_AssignedTaskKeyword where iPageId=  @iPageId                                 
 select * from t_Testdrive_Task_AssignedTaskDifficultyLevel P                                
 inner join t_TestDrive_Task_TaskDifficultyLevel L on P.iTaskDifficultyLevelId = L.iTaskDifficultyLevelId                                
 inner join t_TestDrive_Task_TaskDifficultyLevel_Data LD on L.iTaskDifficultyLevelId = LD.iTaskDifficultyLevelId                                
  where iPageId=  @iPageId                                 
 select * from  t_CMS_Page_Container where iPageId=  @iPageId                                  
 select * from t_CMS_Page where iShortCutToTaskId = @iPageId                     
                     
  select PDA.iPageId, max(iInputStatusId) [MaxInputStatus], min(iInputStatusId) [MinInputStatus] from t_TestDrive_SeparationAndCalibration_Task PA                            
   inner join t_CMS_Page PDA on PA.iTaskId =PDA.iPageID                              
   where PDA.iPageId = @iPageId                         
    group by PDA.iPageId                    
                          
commit 

go 

ALTER proc [dbo].[Proc_TestDrive_Test_AddEditTestFolderProperties]                                          
(                                          
    @iMainClientId int,                    
    @iFolderId int,                    
    @iParentFolderId int,                                
    @vFolderName nvarchar(200),                                
    @vFolderDescription ntext,                    
    @vLanguageXml ntext,                 
    @uUserId uniqueidentifier,          
    @cIsForInternalTesting char(1)                        
)                                          
As                                          
Begin                                          
/********************************************************************************************                                                      
                                                        
  Created By: Arvind Sharma                                                      
  Created Date: 27.09.2011                                                      
  Description: Adds/Edits the test folder                 
                                  
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included uModifiedByUserId colum                                                       
                                                      
********************************************************************************************/                                       
Declare @iTestFolderId int                   
if(@iFolderId=-1)                          
BEGIN                      
                                   
Declare @iNewFolderId int                                 
Insert into t_TestDrive_FileSystem_TestFolder(iTestParentFolderID, iMainClientId, dtCreatedOn, dtModifiedOn, cIsDeleted, vTestFolderName, vTestFolderDescription, uUserId, cIsForInternalTesting)    
values(@iParentFolderId,@iMainClientId,GETDATE(),GETDATE(),'N',@vFolderName,@vFolderDescription,@uUserId,@cIsForInternalTesting)                                
set @iNewFolderId =@@IDENTITY                        
set @iTestFolderId = @iNewFolderId                
select * from t_TestDrive_FileSystem_TestFolder where iTestFolderID =@iNewFolderId                                
END                          
ELSE                          
BEGIN                          
         
 WITH TestFolderLevels (iTestFolderId)            
   AS            
   (            
   -- Parent member definition            
    SELECT iTestFolderId            
    FROM t_TestDrive_FileSystem_TestFolder             
    WHERE iTestFolderID = @iFolderId            
    UNION ALL            
   -- Recursive member definition            
    SELECT P.iTestFolderID            
    FROM t_TestDrive_FileSystem_TestFolder P            
    INNER JOIN TestFolderLevels AS F            
     ON P.iTestParentFolderID = F.iTestFolderId                
   )            
   -- Statement that executes the CTE and inserts the value into the Temp Table                       
            SELECT iTestFolderId into #tbl_TestFolders FROM TestFolderLevels OPTION (MAXRECURSION 0)        
            
   --- updates the Folders in All the Levels for cIsForInternaltesting attributes.            
            Update PF SET PF.cIsForInternalTesting=@cIsForInternalTesting             
   FROM #tbl_TestFolders FL,t_TestDrive_FileSystem_TestFolder PF            
   where FL.iTestFolderId = PF.iTestFolderID               
            
   --- updates the tasks in All the Levels for cIsForInternaltesting attributes.            
            Update TP SET TP.cIsForInternalTesting=@cIsForInternalTesting            
   FROM #tbl_TestFolders F,t_TestDrive_Test_TestProperty TP            
   inner join t_TestDrive_Test P on P.uTestId =TP.uTestId        
   where F.iTestFolderId = P.iFolderId            
            --- Drop the Temp Table            
            Drop Table #tbl_TestFolders           
           
UPDATE t_TestDrive_FileSystem_TestFolder SET                      
dtModifiedOn=GETDATE(),vTestFolderName = @vFolderName,vTestFolderDescription =@vFolderDescription,cIsForInternalTesting =@cIsForInternalTesting,uModifiedById=@uUserId  where iTestFolderID =@iFolderId                   
set @iTestFolderId = @iFolderId                   
select * from t_TestDrive_FileSystem_TestFolder where iTestFolderID =@iFolderId        
END                   
         
--Adding in language table                
                
DELETE FROM t_TestDrive_FileSystem_TestFolder_Language WHERE iTestFolderId = @iTestFolderId                    
DECLARE @XmlDoc INT,                      
@iLanguageId INT                      
                      
EXEC sp_xml_preparedocument @XmlDoc OUTPUT, @vLanguageXml                       
DECLARE  Cur_Test CURSOR FOR                      
SELECT  iLanguageId  FROM    OPENXML(@XmlDoc, 'Language/Id',1) WITH (iLanguageId INT '.' )                        
OPEN  Cur_Test                       
FETCH NEXT from Cur_Test into @iLanguageId                      
WHILE( @@FETCH_STATUS <> -1 )                       
BEGIN                      
 INSERT INTO t_TestDrive_FileSystem_TestFolder_Language values(@iTestFolderId,@iLanguageId)                      
FETCH NEXT FROM Cur_Test INTO @iLanguageId                      
END                      
CLOSE Cur_Test                      
DEALLOCATE Cur_Test                 
                       
End 

GO 

ALTER procedure [dbo].[Proc_CMS_TestNavigationToTest_SaveNavigations]        
    
(     
    
@uTestId uniqueidentifier,       
    
@tSaveXml ntext,       
    
@tNameDataXml ntext,    
    
@uUserId uniqueidentifier,      
    
@iLanguageId int        
    
)            
    
As             
    
/********************************************************************************************       
    
 Created By: Praveen         
    
 Create Date:  13.05.2013           
    
 Description:  Saves the navigations for test in presentation test     
  
 Modified By: Arvind K                                       
 Modified Date: 11/08/2020                                     
 Description: Included uModifiedByUserId column  
    
    
    
 Modified By:            
    
 Modified Date :            
    
 Description:              
    
 ********************************************************************************************/       
    
Begin     
    
Declare @iNameDataXmlPointer int,@iNavigationXmlPointer int,@vAccessId nvarchar(50),@vAccessPid nvarchar(50),@vName nvarchar(500),@cIsActive char(1),@cHasRealPid char(1),@uNavigationId uniqueidentifier,@iOrder int,@uPid uniqueidentifier,@uId uniqueidentifier,@cIsNewNode char(1),@iTaskId int,@iDataLanguageId int    
    
Execute sp_xml_preparedocument @iNavigationXmlPointer OUTPUT,@tSaveXml     
    
Execute sp_xml_preparedocument @iNameDataXmlPointer OUTPUT,@tNameDataXml     
    
    
    
update  t_TestDrive_Test_Navigation set cIsDelete='Y' where uTestNavigationId not in ( Select IsNULL(Id,'00000000-0000-0000-0000-000000000000') from OpenXml(@iNavigationXmlPointer,'/Input/Data')                        
    
    with(Id uniqueidentifier 'Id')     
    
 ) and uTestId=@uTestId      
    
    
    
create table #TempTable(    
    
Id uniqueidentifier,    
    
vAccessId nvarchar(50))      
    
    
    
 declare Cursor_SaveNavigation Cursor For    
    
    Select * from OpenXml(@iNavigationXmlPointer,'/Input/Data')     
    
    with(Id uniqueidentifier 'Id',vName nvarchar(500) 'Name',Pid uniqueidentifier 'Pid',cIsActive char(1) 'IsActive',cHasRealPid char(1) 'HasRealPid',vAccessPid nvarchar(50) 'AccessPid',vAccessId nvarchar(50) 'AccessId',cIsNewNode char(1) 'IsNewNode',TaskId int 'TaskId',iOrder int 'NavigationOrder')                 
    
    
    
 open Cursor_SaveNavigation         
    
 Fetch Next from Cursor_SaveNavigation into @uId,@vName,@uPid,@cIsActive,@cHasRealPid,@vAccessPid, @vAccessId ,@cIsNewNode,@iTaskId,@iOrder     
    
 while(@@FETCH_STATUS <> -1)      
    
 Begin     
    
 if(@cIsNewNode ='Y')    
    
 Begin    
    
  Set @uNavigationId = NEWID()     
    
  insert into #TempTable values (@uNavigationId,@vAccessId)    
    
  if(@cHasRealPid = 'N')    
    
  Begin     
    
   select @uPid=Id from #TempTable where vAccessId = @vAccessPid    
    
  End      
    
    
    
  insert into t_TestDrive_Test_Navigation(uTestNavigationId, uTestId, iPageId, iOrder, cIsActive, cIsDelete, dtCreatedOn, dtModifiedOn, uUserId, uParentTestNavigationId)  
  values(@uNavigationId,@uTestId,@iTaskId,@iOrder,@cIsActive,'N',GETDATE(),GETDATE(),@uUserId,@uPid)    
    
  insert into t_TestDrive_Test_Navigation_Data values(NEWID(),@uNavigationId,@iLanguageId,@vName)    
    
  end    
    
  else    
    
  Begin    
    
    update t_TestDrive_Test_Navigation set cIsActive = @cIsActive,iPageId=@iTaskId,iOrder=@iOrder where uTestNavigationId = @uId    
    
    update t_TestDrive_Test_Navigation_Data set vNavigationName = @vName where uTestNavigationId = @uId and iLanguageId = @iLanguageId    
    
  ENd    
    
   Fetch Next from Cursor_SaveNavigation into @uId,@vName,@uPid,@cIsActive,@cHasRealPid,@vAccessPid, @vAccessId ,@cIsNewNode,@iTaskId,@iOrder    
    
 End      
    
  close Cursor_SaveNavigation     
    
  Deallocate Cursor_SaveNavigation      
    
  EXEC sp_xml_removedocument @iNavigationXmlPointer        
    
    
    
    
    
  /************** Save Navigation Name in data table**************************/    
    
    
    
  declare Cursor_DataNameSave Cursor For    
    
   Select * from OpenXml(@iNameDataXmlPointer,'Input/Data')    
    
   with(vName nvarchar(500) 'Name',LanguageId int 'LanguageId',Id uniqueidentifier 'NavigationId',vAccessId nvarchar(50) 'AccessId',cIsNewNode char(1) 'IsNewNode')    
    
    
    
   open Cursor_DataNameSave     
    
   Fetch Next From Cursor_DataNameSave into @vName,@iDataLanguageId,@uId,@vAccessId,@cIsNewNode    
    
    while(@@FETCH_STATUS <> -1)      
    
 Begin     
    
   if(@cIsNewNode = 'Y')    
    
   Begin    
    
     select @uId=Id from #TempTable where vAccessId = @vAccessId    
    
   End    
    
    
    
   if(exists(select * from t_TestDrive_Test_Navigation_Data where uTestNavigationId = @uId and iLanguageId = @iDataLanguageId))    
    
   Begin    
    
          update t_TestDrive_Test_Navigation_Data set vNavigationName = @vName where uTestNavigationId = @uId and iLanguageId = @iDataLanguageId    
    
   End    
    
   Else    
    
   Begin    
    
          insert into t_TestDrive_Test_Navigation_Data values (newId(),@uId,@iDataLanguageId,@vName)    
    
   End    
    
    
    
   Fetch Next From Cursor_DataNameSave into @vName,@iDataLanguageId,@uId,@vAccessId,@cIsNewNode    
    
   End      
    
    close Cursor_DataNameSave     
    
  Deallocate Cursor_DataNameSave      
    
  EXEC sp_xml_removedocument @iNameDataXmlPointer    
    
    
    
  drop table #TempTable        
    
End

GO 



ALTER procedure [Proc_CMS_CMSElement_SaveComment]    
(      
 @iElementId int  ,    
 @vElementXML nvarchar(max),    
 @iContainerId int = 0,    
 @UserId uniqueidentifier,    
 @iMainClientId int    
)      
AS      
Begin      
 /********************************************************************************************      
   Created By:  Raghavendra Prasanna      
   Create Date:  20.06.2016     
   Description:  Save Comment Text    
  
   Modified By: Arvind K                                       
   Modified Date: 12/08/2020                                     
   Description: Included default value for uModifiedByUserId column  
 ********************************************************************************************/      
    
    --insert into [Arcadix_Common_Service].dbo.[t_framework_exception] values (newid(),1000,333,'Comment',@vElementXML+' '+str(@iContainerId),'',null,getdate())    
    
 Declare @h int,@Id uniqueidentifier,@vText nvarchar(max),@iTextElementId int,@PrimaryKey int,@iCommentElementId int    
 EXECUTE sp_xml_preparedocument @h OUTPUT, @vElementXML    
     
    
 DECLARE Cursor_Elements CURSOR FOR  SELECT Id, vText,PrimaryKey from OpenXml(@h,'/Element/Comments/User',1)    
 with(Id uniqueidentifier './@Id',vText  nvarchar(max) '.' ,PrimaryKey int './@PrimaryKey')    
 OPEN Cursor_Elements FETCH NEXT FROM Cursor_Elements INTO @Id,@vText, @PrimaryKey         
 WHILE( @@Fetch_Status <> -1 )                                  
  BEGIN    
   if(@PrimaryKey = -1 or @PrimaryKey is null)    
   BEGIN    
    INSERT INTO t_CMS_Element  ([iElementTypeId],[iMainClientId],[iFolderID],[cIsDeleted],[cIsDisplayedInElementTree],[dtCreatedOn],[dtModifiedOn],[cIsSecure],[uUserId]) VALUES (1,@iMainClientId,0,'N','Y',GETDATE(),GETDATE(),'Y',@UserId)        
    set @iTextElementId = @@Identity     
    
    INSERT INTO t_CMS_Element_Text ([cIsToggleText],[cIsWithBorder],[iElementId],[iShowContentTime],[vElementTextDescription],[vElementTextName],[vElementTextHtml])    
    Select 'N','N',@iTextElementId,NULL,'','',@vText    
    
    Insert into t_CMS_Element_Comment values(@iElementId,@iTextElementId,@UserId,GETDATE(),getdate(),@iContainerId, NULL)    
   END    
   ELSE    
   BEGIN    
    Select @iCommentElementId = iCommentElementId from t_CMS_Element_Comment where iElementCommentId=@PrimaryKey    
    if(@iCommentElementId is not null)    
    BEGIN    
     Update t_CMS_Element_Text set vElementTextHtml = @vText where iElementId=@iCommentElementId    
    
     DELETE FROM t_CMS_Element_Comment WHERE iElementId=@iElementId and iElementCommentId NOT IN (SELECT PrimaryKey FROM OPENXML (@h, '/Element/Comments/User',1)     
     WITH (PrimaryKey int './@PrimaryKey') where PrimaryKey is not null) and uUserId=@UserId    
    
    END    
   END    
   FETCH NEXT FROM Cursor_Elements INTO @Id,@vText,@PrimaryKey    
  END       
  CLOSE Cursor_Elements                                  
  DEALLOCATE Cursor_Elements                      
    
END 

GO





ALTER  PROCEDURE [Proc_TestDrive_Audit_InsertToAuditTable](    
 @TableDataInserted nvarchar(max),                       
 @TableDataDeleted nvarchar(max),                
 @vTableName nvarchar(4000))    
             
AS                
                       
BEGIN                      
 /********************************************************************************************                      
   Created By:   Arvind Sharma                      
   Create Date:  01.07.2016                       
   Description:  Adds the data in Audit table     
     
   Modified By: Arvind K                                       
   Modified Date: 12/08/2020                                     
   Description: Included column list for Insert Statement                   
               
   ********************************************************************************************/       
    declare @vColumnname nvarchar(max),@uAuditConfigurationColumnId uniqueidentifier ,@SQLQuery nvarchar(max),@iXMLPointer int, @cIsMainTable char(1), @vPrimarykey nvarchar(4000),@vAction nvarchar(50),@uAuditTableId uniqueidentifier,@uAuditConfigurationId
  
    
    
    
 uniqueidentifier,@dtDateModified datetime,@iTransactionId bigint    
    select @vPrimarykey = vPrimarykeyName from t_TestDrive_Audit_Configuration where vTableName=@vTableName;    
 select @cIsMaintable = cIsMainTable from t_TestDrive_Audit_Configuration where vTableName=@vTableName;    
 select @uAuditConfigurationId = uAuditConfigurationId from t_TestDrive_Audit_Configuration where vTableName=@vTableName;    
 SELECT @iTransactionId = transaction_id FROM sys.dm_tran_current_transaction;    
 set @uAuditTableId =newid();    
 set @dtDateModified = getdate()    
    
 if(@TableDataDeleted is null)    
   BEGIN    
   set @vAction='Insert'    
         END    
 else if(@TableDataInserted is null)    
   BEGIN    
   set @vAction='Delete'    
         END    
    else    
      BEGIN    
   set @vAction='Update'    
   END    
      
     
 declare cur_Audit cursor  for select uAuditConfigurationColumnId, vColumnName from  t_TestDrive_Audit_Configuration_Column  where uAuditConfigurationId=@uAuditConfigurationId    
     
     
 open cur_Audit    
    
 FETCH NEXT FROM cur_Audit  INTO @uAuditConfigurationColumnId, @vColumnname      
    
 WHILE @@FETCH_STATUS <> -1      
BEGIN     
    
--if(@vAction='Insert')    
    
--BEGIN    
    
--     set @SQLQuery =' Declare @tTaskInsertXml nvarchar(max) ,@iXMLPointer int;'    
--  set @SQLQuery += ' set @tTaskInsertXml='''+REPLACE(@TableDataInserted,'''','''''')+''';'    
--  set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskInsertXml; '    
--  set @SQLQuery +=' insert into t_TestDrive_Audit_Table_ColumnData select newid(),'''+convert(nvarchar(60),@uAuditTableId)+''','''+convert(nvarchar(60),@uAuditConfigurationColumnId)+''',null,col,'+convert(nvarchar(60),@iTransactionId)+',iLanguageId ,jk FROM    openXML (@iXmlPointer, ''/Data/Row'') WITH ( col nvarchar(max)  ''@'+@vColumnname+''',iLanguageId int  ''@iLanguageID'', jk nvarchar(max) ''@'+@vPrimarykey+''')'     
--  print @SQLQuery    
--  exec (@SQLQuery)    
    
--END    
    
--ELSE    
 if(@vAction='Delete')    
    
BEGIN    
  set @SQLQuery =' Declare @iXMLPointer int ,@tTaskDeleteXml nvarchar(max) ;'    
  set @SQLQuery += ' set @tTaskDeleteXml='''+REPLACE(@TableDataDeleted,'''','''''')+''';'    
  set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskDeleteXml; '    
  set @SQLQuery +=' insert into t_TestDrive_Audit_Table_ColumnData select newid(),'''+convert(nvarchar(60),@uAuditTableId)+''','''+convert(nvarchar(60),@uAuditConfigurationColumnId)+''',col,null,'+convert(nvarchar(60),@iTransactionId)+',iLanguageId ,jk FROM    openXML (@iXmlPointer, ''/Data/Row'') WITH ( col nvarchar(max)  ''@'+@vColumnname+''',iLanguageId int  ''@iLanguageID'', jk nvarchar(max) ''@'+@vPrimarykey+''')'     
      
  exec (@SQLQuery)    
END    
    
ELSE    
 BEGIN    
     
     set @SQLQuery =' Declare @tTaskInsertXml nvarchar(max) ,@iXMLPointer int ,@iXMLPointer2 int ,@tTaskDeleteXml nvarchar(max) ;'    
  set @SQLQuery += ' set @tTaskInsertXml='''+REPLACE(@TableDataInserted,'''','''''')+''';'    
  set @SQLQuery += ' set @tTaskDeleteXml='''+REPLACE(@TableDataDeleted,'''','''''')+''';'    
  set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskInsertXml; '    
  set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer2 OUTPUT, @tTaskDeleteXml; '    
   set @SQLQuery +=' insert into t_TestDrive_Audit_Table_ColumnData select newid(),'''+convert(nvarchar(60),@uAuditTableId)+''','''+convert(nvarchar(60),@uAuditConfigurationColumnId)+''',D.col,I.col,'+convert(nvarchar(60),@iTransactionId)+',iLanguageId ,I.jk FROM    openXML (@iXmlPointer, ''/Data/Row'') WITH ( col nvarchar(max)  ''@'+@vColumnname+''', jk nvarchar(max) ''@'+@vPrimarykey+''',iLanguageId int  ''@iLanguageID'') I '    
  set @SQLQuery +=' inner join  openXML (@iXmlPointer2, ''/Data/Row'') WITH ( col nvarchar(max)  ''@'+@vColumnname+''', jk nvarchar(max) ''@'+@vPrimarykey+''') D on I.jk = D.jk where D.col<>I.col ;'    
      
    
  exec (@SQLQuery)    
    
 END    
     
 FETCH NEXT FROM cur_Audit  INTO @uAuditConfigurationColumnId, @vColumnname    
END    
close cur_Audit    
deallocate cur_Audit    
    
If exists(select * from t_TestDrive_Audit_Table_ColumnData where uAuditTableId=@uAuditTableId)    
  begin    
    
 --if(@vAction='Insert')    
 --  BEGIN    
       
 --   if(@cIsMaintable='Y')    
 --     BEGIN    
      
 --    set @SQLQuery =' Declare @tTaskInsertXml nvarchar(max) ,@iXMLPointer int'    
 --    set @SQLQuery += ' set @tTaskInsertXml='''+REPLACE(@TableDataInserted,'''','''''')+''';'    
 --    set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskInsertXml; '    
 --    set @SQLQuery +=' insert into t_TestDrive_Audit_Table select top 1 '''+convert(nvarchar(60),@uAuditTableId)+''','''+convert(nvarchar(60),@uAuditConfigurationId)+''','''+@vAction+''',getdate(),'+convert(nvarchar(60),@iTransactionId)+',uUserId,vPrimrykeyValue from openXML (@iXmlPointer, ''/Data/Row'') WITH (uUserId uniqueidentifier  ''@uUserId'', vPrimarykeyValue nvarchar(max)  ''@'+@vPrimarykey+'''); '    
 --    ;    
 --    exec (@SQLQuery)    
 --   END    
 --   ELSE    
 --    BEGIN    
 --     EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @TableDataInserted;    
 --     insert into t_TestDrive_Audit_Table select top 1 @uAuditTableId,@uAuditConfigurationId,@vAction,@dtDateModified,@iTransactionId,uUserId,null from openXML (@iXmlPointer, '/Data/Row') WITH (uUserId uniqueidentifier  '@uUserId')    
 --    END    
    
 --  END    
  --ELSE     
  if(@vAction='Delete')    
   BEGIN    
       
   if(@cIsMaintable='Y')    
      BEGIN    
      
     set @SQLQuery =' Declare @tTaskDeleteXml nvarchar(max) ,@iXMLPointer int'    
     set @SQLQuery += ' set @tTaskDeleteXml='''+REPLACE(@TableDataDeleted,'''','''''')+''';'    
     set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskDeleteXml; '    
     set @SQLQuery +=' insert into t_TestDrive_Audit_Table (uAuditTableId,uAuditConfigurationId,vAction,dtCreatedOn,iTransactionId,uUserId,vPrimarykeyValue) select top 1 '''+convert(nvarchar(60),@uAuditTableId)+''','''+convert(nvarchar(60),@uAuditConfigurationId)+''','''+@vAction+''',getdate(),'+convert(nvarchar(60),@iTransactionId)+',uUserId,vPrimarykeyValue from openXML (@iXmlPointer, ''/Data/Row'') WITH (uUserId uniqueidentifier  ''@uUserId'', vPrimarykeyValue nvarchar(max)  ''@'+@vPrimarykey+'''); '  
  
         
     exec (@SQLQuery)    
    END    
    ELSE    
     BEGIN    
      EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @TableDataDeleted;    
      insert into t_TestDrive_Audit_Table (uAuditTableId,uAuditConfigurationId,vAction,dtCreatedOn,iTransactionId,uUserId,vPrimarykeyValue) select top 1 @uAuditTableId,@uAuditConfigurationId,@vAction,@dtDateModified,@iTransactionId,uUserId,null from openXML (@iXmlPointer, '/Data/Row') WITH (uUserId uniqueidentifier  '@uUserId')   
     END    
    
   END    
  ELSE    
  BEGIN    
     
       
   if(@cIsMaintable='Y')    
   BEGIN    
      
   set @SQLQuery =' Declare @tTaskInsertXml nvarchar(max) ,@iXMLPointer int'    
   set @SQLQuery += ' set @tTaskInsertXml='''+REPLACE(@TableDataInserted,'''','''''')+''';'    
   set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskInsertXml; '    
   set @SQLQuery +=' insert into t_TestDrive_Audit_Table (uAuditTableId,uAuditConfigurationId,vAction,dtCreatedOn,iTransactionId,uUserId,vPrimarykeyValue,) select top 1 '''+convert(nvarchar(60),@uAuditTableId)+''','''+convert(nvarchar(60),@uAuditConfigurationId)+''','''+@vAction+''',getdate(),'+convert(nvarchar(60),@iTransactionId)+',uUserId,vPrimarykeyValue from openXML (@iXmlPointer, ''/Data/Row'') WITH (uUserId uniqueidentifier  ''@uUserId'', vPrimarykeyValue nvarchar(max)  ''@'+@vPrimarykey+'''); '  
  
       
   exec (@SQLQuery)    
      
   END    
  ELSE    
   BEGIN    
   EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @TableDataInserted;    
   insert into t_TestDrive_Audit_Table (uAuditTableId,uAuditConfigurationId,vAction,dtCreatedOn,iTransactionId,uUserId,vPrimarykeyValue) select top 1  @uAuditTableId,@uAuditConfigurationId,@vAction,@dtDateModified,@iTransactionId,uUserId,null from openXML
 (@iXmlPointer, '/Data/Row') WITH (uUserId uniqueidentifier  '@uUserId')    
   END    
   END    
    
  END    
    
    
   END    
    
GO

ALTER procedure [dbo].[Proc_TestDrive_Audit_InsertToAuditTableXml](    
 @TableDataInserted nvarchar(max),                       
 @TableDataDeleted nvarchar(max),                
 @vTableName nvarchar(4000))    
             
AS                
                       
BEGIN                      
 /********************************************************************************************                      
   Created By:   Arvind Sharma                      
   Create Date:  01.07.2016                       
   Description:  Adds the data in Audit table   
     
   Modified By: Arvind K                                       
   Modified Date: 12/08/2020                                     
  Description: Included column list for Insert Statement                     
               
   ********************************************************************************************/       
    
    declare @vColumnname nvarchar(max),@uAuditConfigurationColumnId uniqueidentifier ,@SQLQuery nvarchar(max),@iXMLPointer int,    
  @cIsMainTable char(1), @vPrimarykey nvarchar(4000),@vAction nvarchar(50),@uAuditTableId uniqueidentifier,@uAuditConfigurationId uniqueidentifier,@dtDateModified datetime,    
  @iTransactionId bigint,@iLanguageId int,@TableDataInserted1 nvarchar(max),@TableDataDeleted1 nvarchar(max)    
    
    select @vPrimarykey = vPrimarykeyName from t_TestDrive_Audit_Configuration where vTableName=@vTableName;    
 select @cIsMaintable = cIsMainTable from t_TestDrive_Audit_Configuration where vTableName=@vTableName;    
 select @uAuditConfigurationId = uAuditConfigurationId from t_TestDrive_Audit_Configuration where vTableName=@vTableName;    
 SELECT @iTransactionId = transaction_id FROM sys.dm_tran_current_transaction;    
 set @uAuditTableId =newid();    
 set @dtDateModified = getdate()    
 set @TableDataDeleted1 = '';    
 set @TableDataInserted1 ='';    
     
 if(@TableDataDeleted is null and @cIsMainTable='Y')    
   BEGIN    
   set @vAction='Insert'    
         END    
 else if(@TableDataInserted is null and @cIsMainTable='Y')    
   BEGIN    
   set @vAction='Delete'    
         END    
    else if(@TableDataInserted is not null and @TableDataDeleted is not null and @cIsMainTable='Y')    
      BEGIN    
   set @vAction='Update'    
   END    
    
   IF exists (select * from t_TestDrive_Audit_Table where iTransactionId=@iTransactionId)    
    BEGIN    
      update t_TestDrive_Audit_Table set vOldXml =ISnull(vOldXml,'')+'<'+@vTableName+'>'+ISnull(@TableDataDeleted,'')+'</'+@vTableName+'>',vNewXml = Isnull(vNewXml,'')+'<'+@vTableName+'>'+Isnull(@TableDataInserted,'')+'</'+@vTableName+'>' where iTransactionId = @iTransactionId    
    END    
    ELSE    
     BEGIN    
      IF COL_LENGTH(''+@vTableName+'','uModifiedById') IS Not NULL    
 BEGIN    
     set @SQLQuery =' Declare @tTaskInsertXml nvarchar(max) ,@iXMLPointer int,@tTaskDeleteXml nvarchar(max)'    
     print @SQLQuery    
     set @SQLQuery += ' set @tTaskInsertXml='''+REPLACE(ISNULL(@TableDataInserted,''),'''','''''')+'''; set @tTaskDeleteXml='''+REPLACE(ISNULL(@TableDataDeleted,''),'''','''''')+''';'    
     print  @SQLQuery    
     set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskInsertXml; '    
     print @SQLQuery    
     print convert(nvarchar(60),@uAuditConfigurationId)    
     print @vAction    
     set @SQLQuery +=' insert into t_TestDrive_Audit_Table (uAuditTableId,uAuditConfigurationId,vAction,dtCreatedOn,iTransactionId,uUserId,vPrimarykeyValue,vOldXml, vNewXml)  select top 1 newid(),'''+convert(nvarchar(60),@uAuditConfigurationId)+''','''+IsNull(@vAction,'Update')+''',getdate(),'+convert(nvarchar(60),@iTransactionId)+',uUserId,vPrimarykeyValue,''<'+@vTableName+'>'''+'+@tTaskDeleteXml+'''+'</'+@vTableName+'>'',''<'+@vTableName+'>'''+'+@tTaskInsertXml+'''+'</'+@vTableName+'>'' from openXML (@iXmlPointer, ''/Data/Row'') WITH (uUserId uniqueidentifier  ''@uModifiedById'', vPrimarykeyValue nvarchar(max)  ''@'+@vPrimarykey+'''); ';    
     print @SQLQuery    
    exec (@SQLQuery)    
     END    
     ELSE    
    
      BEGIN    
       set @SQLQuery =' Declare @tTaskInsertXml nvarchar(max) ,@iXMLPointer int,@tTaskDeleteXml nvarchar(max)'    
       print @SQLQuery    
       set @SQLQuery += ' set @tTaskInsertXml='''+REPLACE(ISNULL(@TableDataInserted,''),'''','''''')+'''; set @tTaskDeleteXml='''+REPLACE(ISNULL(@TableDataDeleted,''),'''','''''')+''';'    
       print  @SQLQuery    
       set @SQLQuery +='  EXECUTE sp_xml_preparedocument @iXMLPointer OUTPUT, @tTaskInsertXml; '    
       print @SQLQuery    
       print convert(nvarchar(60),@uAuditConfigurationId)    
       print @vAction    
       set @SQLQuery +=' insert into t_TestDrive_Audit_Table (uAuditTableId,uAuditConfigurationId,vAction,dtCreatedOn,iTransactionId,uUserId,vPrimarykeyValue,vOldXml, vNewXml)  select top 1 newid(),'''+convert(nvarchar(60),@uAuditConfigurationId)+''','''+IsNull(@vAction,'Update')+''',getdate(),'+convert(nvarchar(60),@iTransactionId)+',uUserId,vPrimarykeyValue,''<'+@vTableName+'>'''+'+@tTaskDeleteXml+'''+'</'+@vTableName+'>'',''<'+@vTableName+'>'''+'+@tTaskInsertXml+'''+'</'+@vTableName+'>'' from openXML (@iXmlPointer, ''/Data/Row'') WITH (uUserId uniqueidentifier  ''@uUserId'', vPrimarykeyValue nvarchar(max)  ''@'+@vPrimarykey+'''); ';    
       print @SQLQuery    
       exec (@SQLQuery)    
      END    
    END    
 END

 GO

 ALTER procEDURE [dbo].Proc_TestDrive_Test_ElementObjectRules_SaveAsCutomTemplate        
(        
   @iMainClientId int,        
   @uUserId uniqueidentifier,        
   @uElementFormulaAttributeTemplateId uniqueidentifier,         
   @vTemplateName nvarchar(200),        
   @iLanguageId int      
)          
AS         
BEGIN       
Declare        
@uNewElementFormulaAttributeTemplateId uniqueidentifier,        
@uNewResultAttributeId uniqueidentifier,        
@uNewResultAttributeFormulaId uniqueidentifier,         
@uResultAttributeId uniqueidentifier ,@iCalculationLevelId int ,@vAttributeKey nvarchar(200),@iOrder int,@cIsDeleted char(1),@cIsVisible char(1),@vUnit nvarchar(50),        
@cIsForWholeTask char(1),@dTaskCorrectPoints decimal(8,2),@dTasksWrongPoints decimal(8,2),@dTaskNotAnsweredPoints decimal(8,2),@cIsAdaptive char(1), @iBaseTemplateId int       
/********************************************************************************************      
Created By:  Praveen         
Created Date: 21.02.2012         
Description:  Procedure to save ElementObjectRules        
        
Modified By: Arvind K      
Modified Date: 11/08/2020        
 Description: Included column list for Insert statements                                                                        
********************************************************************************************/       
  set @uNewElementFormulaAttributeTemplateId = newid()         
  -- Templates        
 declare curTemplate cursor for select cIsForWholeTask,dTaskCorrectPoints,dTasksWrongPoints,dTaskNotAnsweredPoints,iElementFormulaAttributeBaseTypeId from t_TestDrive_Test_ResultAttribute_ElementFormulaAttribute_Template       
 where uElementFormulaAttributeTemplateId = @uElementFormulaAttributeTemplateId      
 open curTemplate         
 FETCH next from curTemplate into @cIsForWholeTask,@dTaskCorrectPoints,@dTasksWrongPoints,@dTaskNotAnsweredPoints ,@iBaseTemplateId       
 while (@@fetch_status <> -1)         
 BEGIN          
  insert into t_TestDrive_Test_ResultAttribute_ElementFormulaAttribute_Template ([uElementFormulaAttributeTemplateId],[iMainClientId],[uUserId],[dtCreatedOn],[dtModifiedOn],[cIsDeleted],[cIsForWholeTask],      
  [dTaskCorrectPoints],[dTasksWrongPoints],[dTaskNotAnsweredPoints],[cIsSystem],[iElementFormulaAttributeBaseTypeId],cIsDefault)        
  values(@uNewElementFormulaAttributeTemplateId,@iMainClientId,@uUserId,getdate(),getdate(),'N',@cIsForWholeTask,@dTaskCorrectPoints,@dTasksWrongPoints,@dTaskNotAnsweredPoints,'N',@iBaseTemplateId,'N')       
      
   insert into t_TestDrive_Test_ResultAttribute_ElementFormulaAttribute_Template_Data ([uElementFormulaAttributeTemplateDataId],[uElementFormulaAttributeTemplateId],[iLanguageId],[vTemplateName])         
  values(newid(),@uNewElementFormulaAttributeTemplateId,@iLanguageId,@vTemplateName)       
  FETCH next from curTemplate into @cIsForWholeTask,@dTaskCorrectPoints,@dTasksWrongPoints,@dTaskNotAnsweredPoints,@iBaseTemplateId         
 END       
 CLOSE curTemplate       
 DEALLOCATE curTemplate       
        
 insert into t_TestDrive_Test_ResultAttribute_ElementRule (uTestElementRuleId, uElementFormulaAttributeTemplateId, iElementTypeId, iElementRuleId, dtCreatedOn, dtModifiedOn, uUserId)  
 select NEWID(),@uNewElementFormulaAttributeTemplateId,iElementTypeId,iElementRuleId,getdate(),getdate(),@uUserId       
 from t_TestDrive_Test_ResultAttribute_ElementRule where uElementFormulaAttributeTemplateId = @uElementFormulaAttributeTemplateId      
        
 insert into t_TestDrive_Test_ResultAttribute_ElementFormulaAttribute (uElementFormulaAttributeId, uElementFormulaAttributeTemplateId, iElementTypeId, dElementObjectsCorrect, dElementObjectsWrong, dElementObjectsNotAnswered, dUpperBoundValue, dLowerBoundValue, uUserId, dtCreatedOn, dtModifiedOn, cIsForElement)      
 select NEWID(),@uNewElementFormulaAttributeTemplateId,iElementTypeId,dElementObjectsCorrect,dElementObjectsWrong,dElementObjectsNotAnswered,dUpperBoundValue,dLowerBoundValue,@uUserId,getDate(),getdate(),cIsForElement      
  from t_TestDrive_Test_ResultAttribute_ElementFormulaAttribute where uElementFormulaAttributeTemplateId = @uElementFormulaAttributeTemplateId        
        
 Select FT.uElementFormulaAttributeTemplateId,FTD.vTemplateName from t_TestDrive_Test_ResultAttribute_ElementFormulaAttribute_Template FT         
 inner join t_TestDrive_Test_ResultAttribute_ElementFormulaAttribute_Template_Data FTD on FTD.uElementFormulaAttributeTemplateId = FT.uElementFormulaAttributeTemplateId       
 where FT.uElementFormulaAttributeTemplateId = @uNewElementFormulaAttributeTemplateId        
        
End

GO

ALTER proc [dbo].[JProc_CMS_CMSPAGE_JAddEditTaskProperties_Compact]                  
(                  
 @vTaskDataJson NTEXT,            
 @iMainClientId int,                 
 @vAction NVARCHAR(200),                
 @cEnableTaskNameChangeforlinkedTasks char(1)                        
)                  
 AS                  
 BEGIN  transaction                  
 DECLARE @h int                  
    DECLARE @iPageId int,@uUserId uniqueidentifier                  
    select @uUserId = uUserid from OPENJSON(@vTaskDataJson) with (uUserId uniqueidentifier)                    
 /*** For Basic Properties **/                  
 if(@vAction='New')                  
  BEGIN                  
   insert into t_CMS_Page(vPageName,vPageDescription,iFolderId,dtCreatedOn,dtModifiedOn,iMainClientId,uUserId,uPageGuid)                  
                  
 Select  vPageName,vPageDescription,iFolderId,getdate(),getdate(),@iMainClientId,uUserId,NEWID()                  
 from OPENJSON(@vTaskDataJson) with (vPageName NVARCHAR(2000) ,vPageDescription NVARCHAR(4000),                
 iFolderId int,dtCreatedOn datetime,                  
 dtModifiedOn datetime,uUserId uniqueidentifier)                  
 set @iPageId = @@IDENTITY                  
                     
 insert into t_CMS_PageProperty_TestDrive(iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,                  
 iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,                
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId)                 
                  
 Select  @iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,                  
 iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,                
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId                
 from OPENJSON(@vTaskDataJson) with (iSubjectId int,iCategoryId int,                
 cIsCalibratedActive char(1) ,cIsCalibrationComplete char(1),cIsSeparated char(1) ,iInputStatusId int ,                
 dTaskDifficulty decimal(12,8) , cDifficultyHasBeenInputManually char(1),                
 iTaskTypeId int,uSkinId uniqueidentifier ,cIsSuitableForOnline char(1),                
 cIsSuitableForPaperPencil char(1),cIsPaperPencil char(1) ,vCustomerTaskId nvarchar(200) ,                
 iTaskUsageId int ,iEstimatedTimeToSolveSolveInSeconds int,vSource nvarchar(500) ,                
 iTaskReviewStatusId int ,                
 cIsForInternalTesting char(1),cIsDataStoragePlaceholder char(1), cIsCreatedByTeacher char(1) ,iCategoryCompetencyId int ,cIsAdaptiveTask char(1),iCategoryCompetencyLevelId int,iCategoryCompetencyRangeId int )                  
  END                  
  ELSE                  
  BEGIN                  
                      
 select @iPageId = iPageId from OPENJSON(@vTaskDataJson)with (iPageId int)                  
                      
 update T Set T.vPageName = XT.vPageName,T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                  
 T.uModifiedById = XT.uUserId          
 from t_CMS_Page T,OPENJSON(@vTaskDataJson)                  
 with (iPageId int ,vPageName NVARCHAR(2000) ,vPageDescription NVARCHAR(4000) ,iFolderId int,                
 dtCreatedOn datetime,                  
 dtModifiedOn datetime ,uUserId uniqueidentifier ) XT                  
 where T.iPageId = XT.iPageId                  
                     
  update TP set TP.iSubjectId = XTP.iSubjectId,TP.iCategoryId = XTP.iCategoryId,TP.cIsCalibratedActive = XTP.cIsCalibratedActive,              
  TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,                
  TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,                  
  TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,                
  TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,                
  TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,                
  TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.iCategoryCompetencyId=XTP.iCategoryCompetencyId,TP.                
  cIsAdaptiveTask = XTP.cIsAdaptiveTask,TP.iCategoryCompetencyLevelId = XTP.iCategoryCompetencyLevelId,TP.iCategoryCompetencyRangeId = XTP.iCategoryCompetencyRangeId                
  from t_CMS_PageProperty_TestDrive TP,OPENJSON(@vTaskDataJson)                 
  with (iPageId int ,iSubjectId int ,iCategoryId int,                
  cIsCalibratedActive char(1) ,cIsCalibrationComplete char(1),cIsSeparated char(1) ,                
  iInputStatusId int ,dTaskDifficulty decimal(12,8) ,cDifficultyHasBeenInputManually char(1),                
  iTaskTypeId int ,uSkinId uniqueidentifier ,cIsSuitableForOnline char(1),                
  cIsSuitableForPaperPencil char(1) ,cIsPaperPencil char(1) ,vCustomerTaskId nvarchar(200) ,                
  iTaskUsageId int ,iEstimatedTimeToSolveSolveInSeconds int,vSource nvarchar(500),                
  cIsForInternalTesting char(1),                
  cIsDataStoragePlaceholder char(1), cIsCreatedByTeacher char(1) ,iCategoryCompetencyId int ,cIsAdaptiveTask char(1) ,iCategoryCompetencyLevelId int ,iCategoryCompetencyRangeId int) XTP                  
    where TP.iPageId = XTP.iPageId                 
                 
 if exists(select * from t_CMS_Page where iShortcutToTaskId=@iPageId)                
  BEGIN                
   if(@cEnableTaskNameChangeforlinkedTasks='Y')                
   BEGIN                
    update T Set T.vPageName = XT.vPageName,T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                  
 T.uModifiedById = XT.uUserId                
 from t_CMS_Page T,OPENJSON(@vTaskDataJson)                  
 with (iPageId int ,vPageName NVARCHAR(2000) ,vPageDescription NVARCHAR(4000) ,iFolderId int,                
 dtCreatedOn datetime,                  
 dtModifiedOn datetime ,uUserId uniqueidentifier ) XT                  
 where T.iShortcutToTaskId = XT.iPageId                   
 End                
                
 Else                
 BEGIN                
    update T Set T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                  
 T.uModifiedById = XT.uUserId                 
 from t_CMS_Page T,OPENJSON(@vTaskDataJson)                  
 with (iPageId int ,vPageName NVARCHAR(2000) ,vPageDescription NVARCHAR(4000) ,iFolderId int,                
 dtCreatedOn datetime,                  
 dtModifiedOn datetime ,uUserId uniqueidentifier ) XT                  
 where T.iShortcutToTaskId = XT.iPageId                  
 END                
                
 update TP set TP.iSubjectId = XTP.iSubjectId,TP.iCategoryId = XTP.iCategoryId,TP.cIsCalibratedActive = XTP.cIsCalibratedActive,                
  TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,                
  TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,                  
  TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,                
  TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,                
  TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,                
  TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.iCategoryCompetencyId=XTP.iCategoryCompetencyId,TP.                
  cIsAdaptiveTask = XTP.cIsAdaptiveTask,TP.iCategoryCompetencyLevelId = XTP.iCategoryCompetencyLevelId,TP.iCategoryCompetencyRangeId = XTP.iCategoryCompetencyRangeId                
  from t_CMS_PageProperty_TestDrive TP,OPENJSON(@vTaskDataJson)                 
  with (iPageId int ,iSubjectId int ,iCategoryId int,                
  cIsCalibratedActive char(1) ,cIsCalibrationComplete char(1),cIsSeparated char(1) ,                
  iInputStatusId int ,dTaskDifficulty decimal(12,8) ,cDifficultyHasBeenInputManually char(1),                
  iTaskTypeId int ,uSkinId uniqueidentifier ,cIsSuitableForOnline char(1),                
  cIsSuitableForPaperPencil char(1) ,cIsPaperPencil char(1) ,vCustomerTaskId nvarchar(200) ,                
  iTaskUsageId int ,iEstimatedTimeToSolveSolveInSeconds int,vSource nvarchar(500),                
  cIsForInternalTesting char(1),                
  cIsDataStoragePlaceholder char(1), cIsCreatedByTeacher char(1) ,iCategoryCompetencyId int ,cIsAdaptiveTask char(1) ,iCategoryCompetencyLevelId int ,iCategoryCompetencyRangeId int) XTP                  
   where TP.iPageId in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                
                
   /************ Adding Languages For linked tasks**************/                  
                
 delete from t_CMS_Page_Language where iPageID in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId)                
 declare @iNewPageId int                
 Declare Cur_1 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                
 open Cur_1                
 fetch next from Cur_1 into @iNewPageId                
 while(@@FETCH_STATUS<>-1)                
 begin                
  insert into t_CMS_Page_Language select @iNewPageId,value from OPENJSON (@vTaskDataJson, '$.Languages')                 
 fetch next from Cur_1 into @iNewPageId                
 end                
  close Cur_1                
  deallocate Cur_1                
                    
/************ End Adding Languages For linked Task**************/                  
                
                
/**********************For Task keyword linked tasks***********/                  
                  
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                
 Declare Cur_2 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                
 open Cur_2                
 fetch next from Cur_2 into @iNewPageId                
 while(@@FETCH_STATUS<>-1)                
 begin                
   insert into t_Testdrive_Task_AssignedTaskKeyword select @iNewPageId,value from OPENJSON (@vTaskDataJson, '$.Keyword')                  
 fetch next from Cur_2 into @iNewPageId                
 end                
  close Cur_2                
  deallocate Cur_2                
                     
/**********************End ask keyword linked tasks***********/                 
                
/**********************For Assigned Additional Property linked tasks***********/                  
                  
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                
 Declare Cur_A cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                
 open Cur_A                
 fetch next from Cur_A into @iNewPageId                
 while(@@FETCH_STATUS<>-1)                
 begin                
  insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iNewPageId,[key],ISNULL(value,-1) from OPENJSON(@vTaskDataJson, '$.AdditionalProperty')              
 fetch next from Cur_A into @iNewPageId                
 end                
  close Cur_A                
  deallocate Cur_A                
                     
/**********************End ask keyword linked tasks***********/                 
                
/**********************For Task DifficultyLevel for linked tasks***********/                  
                  
 delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')            
 Declare Cur_3 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                
 open Cur_3                
 fetch next from Cur_3 into @iNewPageId                
 while(@@FETCH_STATUS<>-1)                
 begin                
                 
   insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iNewPageId,[key],value from OPENJSON(@vTaskDataJson,'$.SchoolYearDifficulty')              
 fetch next from Cur_3 into @iNewPageId                
 end                
  close Cur_3                
  deallocate Cur_3                
                  
/**********************End Task DifficultyLevel for linked tasks***********/                 
                
/**********************For ReviewStatus for linked tasks***********/                  
             
   Declare Cur_4 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                
 open Cur_4                
 fetch next from Cur_4 into @iNewPageId                
 while(@@FETCH_STATUS<>-1)                
 BEGIN                
                  
   declare @iStatusLanguageId1 int,@tChangeRequest1 nvarchar(max),@uWorkflowStatusId1 uniqueidentifier,@vTitle1 nvarchar(max),@iPageDataId int,@vStatusJson nvarchar(max)                
    Declare Cur_PageDataStatus1 cursor                
                        
 For select [key],value from OPENJSON (@vTaskDataJson, '$.Data')              
 open Cur_PageDataStatus1                
 Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@vStatusJson                
 while(@@FETCH_STATUS<>-1)                
 begin                
 print @tChangeRequest1                
 if exists(select * from  t_CMS_Page_Data where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1)                
 begin                
  print @iStatusLanguageId1                
   select @vTitle1 = vPageTitle,@uWorkflowStatusId1 = uWorkflowStatusId,@tChangeRequest1 =vComment  from OPENJSON (@vStatusJson) with (vPageTitle nvarchar(max),uWorkflowStatusId uniqueidentifier '$.WorkflowStatus[0].uWorkflowStatusId',vComment nvarchar(max) '$.WorkflowStatus[0].vComment')              
              
 update t_CMS_Page_Data set vPageTitle = @vTitle1 where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1                
  select @iPageDataId = ipageDataId from t_CMS_Page_Data where iPageID =@iNewPageId and iLanguageID= @iStatusLanguageId1                
  if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uWorkflowStatusId1 and iPageDataId=@iPageDataId and uUserId =@uUserId and cIsLatest='Y')                
 BEGIN                
  If(@uWorkflowStatusId1 is not null)                
   BEGIN                
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId        
          
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)              
  values (newid(),@iPageDataId,@uWorkflowStatusId1,@tChangeRequest1,@uUserId,GETDATE(),'Y')                
   END                
  END                
 END                
 else                
 begin                
    select @vTitle1 = vPageTitle,@uWorkflowStatusId1 = uWorkflowStatusId,@tChangeRequest1 =vComment  from OPENJSON (@vStatusJson) with (vPageTitle nvarchar(max),uWorkflowStatusId uniqueidentifier '$.WorkflowStatus[0].uWorkflowStatusId'  
 ,vComment nvarchar(max)'$.WorkflowStatus[0].vComment')              
            
   insert into t_CMS_Page_Data values(@iNewPageId,@iStatusLanguageId1,@vTitle1,null,null,NULL,'N',null)                
  set @iPageDataId=@@IDENTITY                
  If(@uWorkflowStatusId1 is not null)                
   BEGIN                
 insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
 values(newid(),@iPageDataId,@uWorkflowStatusId1,@tChangeRequest1,@uUserId,GETDATE(),'Y')                
   END                
 end                
  Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@vStatusJson                  
  end                
  close Cur_PageDataStatus1                
  deallocate Cur_PageDataStatus1                
                 
 fetch next from Cur_4 into @iNewPageId                
 end                
  close Cur_4                
  deallocate Cur_4                
                
/**********************End ReviewStatus for linked tasks***********/                 
                
                
                
  END                
                     
  END                  
             
  /**** Basic Properties End ****/                  
                    
/************ Adding Languages For Task**************/                  
               
 delete from t_CMS_Page_Language where iPageID=@iPageId                
 insert into t_CMS_Page_Language select @iPageId,value from OPENJSON (@vTaskDataJson, '$.Languages')              
                  
/************ End Adding Languages For Task**************/                  
                  
                
/**********************For Workflow Status***********/                  
   declare @iStatusLanguageId int,@tChangeRequest nvarchar(max),@uWorkflowStatusId uniqueidentifier,@vTitle nvarchar(max),@iPageDataId1 int,@vStatusJson1 nvarchar(max)                
    Declare Cur_PageDataStatus cursor                
                        
 For select [key],value from OPENJSON (@vTaskDataJson, '$.Data')              
 open Cur_PageDataStatus                
 Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@vStatusJson1                
 while(@@FETCH_STATUS<>-1)                
 begin                
 print @tChangeRequest                
 if exists(select * from  t_CMS_Page_Data where iPageID = @iPageId and iLanguageID= @iStatusLanguageId)                
 begin                
  print @iStatusLanguageId                
   select @vTitle = vPageTitle,@uWorkflowStatusId = uWorkflowStatusId,@tChangeRequest =vComment  from OPENJSON (@vStatusJson1) with (vPageTitle nvarchar(max),uWorkflowStatusId uniqueidentifier '$.WorkflowStatus[0].uWorkflowStatusId',vComment nvarchar(max   
    
      
        
         
)            
 '$.WorkflowStatus[0].vComment')              
              
 update t_CMS_Page_Data set vPageTitle = @vTitle where iPageID = @iPageId and iLanguageID= @iStatusLanguageId                
  select @iPageDataId1 = ipageDataId from t_CMS_Page_Data where iPageID =@iPageId and iLanguageID= @iStatusLanguageId                
  if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uWorkflowStatusId and iPageDataId=@iPageDataId1 and uUserId =@uUserId and cIsLatest='Y')                
 BEGIN                
  If(@uWorkflowStatusId is not null)                
   BEGIN                
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId1                
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
   values(newid(),@iPageDataId1,@uWorkflowStatusId,@tChangeRequest,@uUserId,GETDATE(),'Y')                
   END                
  END                
 END                
 else                
 begin                
    select @vTitle = vPageTitle,@uWorkflowStatusId = uWorkflowStatusId,@tChangeRequest =vComment  from OPENJSON (@vStatusJson1) with (vPageTitle nvarchar(max),uWorkflowStatusId uniqueidentifier '$.WorkflowStatus[0].uWorkflowStatusId',vComment nvarchar(max
  
    
      
        
          
            
) '$.WorkflowStatus[0].vComment')              
              
   insert into t_CMS_Page_Data values(@iPageId,@iStatusLanguageId,@vTitle,null,null,NULL,'N',null)                
  set @iPageDataId1=@@IDENTITY                
  If(@uWorkflowStatusId is not null)                
   BEGIN                
 insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
 values(newid(),@iPageDataId1,@uWorkflowStatusId,@tChangeRequest,@uUserId,GETDATE(),'Y')                
   END                
 end                
  Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@vStatusJson1                  
  end                
  close Cur_PageDataStatus                
  deallocate Cur_PageDataStatus                
                 
                
/**********************ReviewStatus End***********/                 
                
                
/**********************For Task keyword***********/                  
                  
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId=@iPageId                  
 insert into t_Testdrive_Task_AssignedTaskKeyword select @iPageId,value from OPENJSON (@vTaskDataJson, '$.Keyword')                 
                  
/**********************Data Task keyword***********/                 
                
/**********************For Task Additional Property***********/                  
                  
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId=@iPageId                  
 insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iPageId,[key],ISNULL(value,-1) from OPENJSON(@vTaskDataJson, '$.AdditionalProperty')                
                  
/**********************For Task Additional Property***********/                 
                
/**********************For Task DifficultyLevel***********/                 
              
  delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId=@iPageId                  
  insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iPageId,[key],value from OPENJSON(@vTaskDataJson,'$.SchoolYearDifficulty')               
                  
/**********************Data Task DifficultyLevel***********/                 
                
 select (                      
   select                       
  p.iPageTemplateId                      
 ,p.iMainClientId                      
 ,p.iFolderId                      
 ,p.dtCreatedOn                      
 ,p.dtModifiedOn                      
 ,p.cIsDeleted                      
 ,p.cIsSecure                      
 ,p.uUserId                      
 ,p.vPageName                      
 ,p.vPageDescription                      
 ,p.uPageGuid                      
 ,p.cIsShortcut                      
 ,p.iShortcutToTaskId                      
 ,p.uModifiedById                                
 , pp.*           
           
 /***** Task Languages*********/          
  ,(                  
   select  pl.iLanguageId                  
   from t_cms_page_language pl              
   where pl.iPageId =p.iPageId for json path, include_null_values              
  )   [Languages]           
           
 /***** END Task Languages*********/           
           
 /***** Task Keywords*************/          
  ,(                  
   select  TK.iTaskKeywordId                     from t_testdrive_task_assignedtaskkeyword TK              
   where TK.iPageId =p.iPageId for json path, include_null_values              
  )   [Keywords]           
  /***** END Task Keywords*************/          
           
 /***** Task Difficulty Level*************/          
  ,(                  
   select  TDL.iSchoolYearId,TDL.iTaskDifficultyLevelId                  
   from t_testdrive_task_assignedtaskdifficultylevel TDL              
   where TDL.iPageId =p.iPageId for json path, include_null_values              
  )   [DifficultyLevel]           
  /***** END Task Difficulty Level*************/          
          
  /***** Container Information *************/          
  ,(                  
   select  TC.iContainerId,TC.iOrder,Tc.iLanguageId,tc.dContainerPoints                  
   from t_cms_page_container TC              
   where TC.iPageId =p.iPageId for json path, include_null_values              
  )   [Container]           
  /***** End Container Information*************/          
          
  /***** Additional Task Properties *************/          
  ,(                  
   select  TC.iAdditionalTaskPropertyId,TC.iAdditionalTaskPropertyValueId             
   from t_testdrive_task_assignedadditionaltaskproperty TC              
   where TC.iPageId =p.iPageId for json path, include_null_values              
  )   [AdditionalProperties]           
  /***** End Additional Task Properties *************/          
          
  /***** Task Language and workflow Data*************/          
   ,(                  
   select  PD.iLanguageId,PD.vPageTitle,PD.tCorrectAnswerExplanation,PD.cPointOverride,PD.dPoints,          
   (          
   select AW.uWorkflowStatusId,AW.vComment,AW.uUserId,AW.dtCreatedOn,AW.cIsLatest from t_Cms_Page_AssignedWorkflowStatus AW           
   where Aw.iPageDataId = PD.iPageDataID order by iLanguageID, cIsLatest desc    for json path, include_null_values          
   ) [WorkflowStatus]           
                          
   from t_CMS_Page_Data PD              
   where PD.iPageId =p.iPageId           
             
             
   for json path, include_null_values              
  ) [Data]          
  /***** End Task Language and workflow Data *************/          
          
  /*******************Shortcut tasks*********************/          
  ,(                  
   select  TC.iPageId                 
   from t_CMS_Page TC              
   where TC.iShortcutToTaskId =p.iPageId  for json path, include_null_values              
  )   [ShortcutTask]           
          
  /*******************End Shortcut tasks*********************/          
          
          
   for json path, include_null_values, without_array_wrapper) as jsonresult                      
   from t_cms_page p                      
   inner join t_cms_pageproperty_testdrive pp on p.ipageid=pp.ipageid                      
   where          
    p.imainclientid=@imainclientid and p.cisdeleted='N'             
   and p.iPageId=@iPageId          
            
   order by vPageName                 
                
                
 commit 

 GO

      
ALTER procEDURE [Proc_CMS_CMSPage_ResetWorkFlowStatus]        
(                                            
  @vPageFolderXml nvarchar(max),                                    
  @iMainClientId INT,        
  @uWorkflowStatusId uniqueidentifier,      
  @iLanguageId int,      
  @uUserId uniqueidentifier      
)        
As                                          
DECLARE @iXMLPointer int,              
@iFolderId int              
Begin                                             
/********************************************************************************************                                            
 Created By:  Arvind Sharma                                            
 Create Date:  21.07.2016                                            
 Description:  resets all workflow status for folder      
                                          
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert Statements                                           
********************************************************************************************/                                            
   EXECUTE sp_xml_preparedocument @iXmlPointer OUTPUT, @vPageFolderXml               
 DECLARE Cursor_Task CURSOR                    
    FOR SELECT  * FROM    openXML (@iXmlPointer, '/Folder/Id') WITH ( Id INT '.' )                
    Open Cursor_Task                 
    FETCH NEXT FROM Cursor_Task INTO  @iFolderId              
    WHILE(@@FETCH_STATUS<>-1)              
    BEGIN      
        
  update t_Cms_Page_AssignedWorkflowStatus set  cIsLatest ='Z' where uTaskWorkflowStatusId in(      
  select A.uTaskWorkflowStatusId from t_cms_page P      
  inner join t_cms_page_Data D on P.iPageId = D.iPageID       
  inner join t_Cms_Page_AssignedWorkflowStatus A on A.iPageDataId = D.iPageDataID where iLanguageID = @iLanguageId and      
  P.iFolderId = @iFolderId and cIsDeleted ='N' and cIsLatest ='Y' and iMainClientId = @iMainClientId )      
      
      
   insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)  
   select newid(),iPageDataId,@uWorkflowStatusId,'',@uUserId,GETDATE(),'Y' from t_Cms_Page_AssignedWorkflowStatus      
   where uTaskWorkflowStatusId in(      
  select A.uTaskWorkflowStatusId from t_cms_page P      
  inner join t_cms_page_Data D on P.iPageId = D.iPageID       
  inner join t_Cms_Page_AssignedWorkflowStatus A on A.iPageDataId = D.iPageDataID where iLanguageID = @iLanguageId and      
  P.iFolderId = @iFolderId and cIsDeleted ='N' and cIsLatest ='Z' and iMainClientId = @iMainClientId)      
      
  update t_Cms_Page_AssignedWorkflowStatus set  cIsLatest ='N' where uTaskWorkflowStatusId in(      
  select A.uTaskWorkflowStatusId from t_cms_page P      
  inner join t_cms_page_Data D on P.iPageId = D.iPageID       
  inner join t_Cms_Page_AssignedWorkflowStatus A on A.iPageDataId = D.iPageDataID where iLanguageID = @iLanguageId and      
  P.iFolderId = @iFolderId and cIsDeleted ='N' and cIsLatest ='Z' and iMainClientId = @iMainClientId)      
      
  FETCH NEXT FROM Cursor_Task INTO  @iFolderId        
 END      
 CLOSE Cursor_Task                              
 DEALLOCATE Cursor_Task                        
 EXEC sp_xml_removedocument @iXmlPointer        
      
 --get latest workflow status      
 select PW.* from t_cms_page_Data Pd       
 INNER JOIN t_cms_page P on P.iPageId  = Pd.iPageId      
 INNER JOIN t_Cms_Page_AssignedWorkflowStatus PW on PW.iPageDataID = Pd.iPageDataID      
 where P.iMainClientId=@iMainClientId and cIsDeleted='N' and P.iFolderId = @iFolderId and iLanguageID = @iLanguageId      
       
END 

GO

ALTER proc [dbo].[Proc_CMS_AddEditTask_InsertNewSubjects]                       
                        
(                              
                            
  @tSubjectXml ntext,                              
  @iLanguageId int,                                 
  @iMainClientId int                    
)                                                          
AS                                
BEGIN                                
declare                              
@g int ,   @vSubjectName nvarchar(500)  , @iDisplayOrder int , @iSubjectId int                
                    
/********************************************************************************************                                
 Created By:       Vidhyut Kediya                          
 Create Date:      5-Jul-2012                      
 Description:      Called on Import Task Excel, it inserts Main Subjects if they don't exist in table.                        
                         
********************************************************************************************/                              
                   
 if(Datalength(@tSubjectXml) > 0)                      
 begin               
EXECUTE sp_xml_preparedocument @g OUTPUT, @tSubjectXml          
          
DECLARE cursor_Subjects CURSOR                                
        FOR select  *                                
            from  OPENXML(@g, 'Subjects/SubjectName') with (                
            Name nvarchar(500) '.')                         
          
  open cursor_Subjects           
  Fetch Next From cursor_Subjects into  @vSubjectName          
     while( @@FETCH_STATUS<>-1)          
     begin          
     set @iDisplayOrder = (select MAX(iDisplayOrder) from t_TestDrive_Subject)          
     insert into t_TestDrive_Subject(dConstance, dVariance, iParentSubjectId, iDisplayOrder, iMainClientId, vKeyForImage, cIsDeleted, cEnforceDisplayNameForTest,  cIsSubSubjectToSelectFromMany, cIsLearnCoacherSubject, uUserId,dtModifiedOn, dtCreatedOn, cIsTestedAtThisTime)  
   values (NULL,NULL,0,@iDisplayOrder+1,@iMainClientId,NULL,'N',NULL,'N',NULL,NULL,NULL,NULL,NULL)          
     set @iSubjectId = @@IDENTITY          
     insert into t_TestDrive_Subject_Data values (@iSubjectId,@iLanguageId,@vSubjectName,NULL,NULL,NULL,NULL)          
               
  Fetch Next From cursor_Subjects into  @vSubjectName               
  end          
  close cursor_Subjects                                        
    Deallocate cursor_Subjects                                        
    EXEC sp_xml_removedocument @g                       
end           
          
end

GO 

ALTER proc [dbo].[Proc_CMS_CMSElements_AddEditElementFolder]                                  
(                                  
    @iMainClientId int,            
    @iFolderId int,            
    @iElementType int,                         
    @iParentFolderId int,                        
    @vFolderName nvarchar(200),                        
    @vFolderDescription ntext,             
    @uUserId uniqueidentifier                 
)                                  
As                                  
Begin                                  
/********************************************************************************************                                              
                                                
  Created By: Arvind Sharma                                              
  Created Date: 16.03.2011                                              
  Description: Adds the Audio Element                              
                          
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert statements                                             
                                              
********************************************************************************************/                               
if(@iFolderId=-1)                  
BEGIN              
                           
Declare @iNewFolderId int                         
Insert into t_CMS_FileSystem_ElementFolder (iElementTypeId, iElementParentFolderId, iMainClientId, dtCreatedOn, dtModifiedOn, cIsDeleted, vElementFolderName, vElementFolderDescription, uUserId)  
values(@iElementType,@iParentFolderId,@iMainClientId,GETDATE(),GETDATE(),'N',@vFolderName,@vFolderDescription,@uUserId)                      
set @iNewFolderId =@@IDENTITY                
print @iNewFolderId                  
select * from t_CMS_FileSystem_ElementFolder          
 where iFolderId =@iNewFolderId                        
END                  
ELSE                  
BEGIN                  
          
UPDATE t_CMS_FileSystem_ElementFolder SET              
dtModifiedOn=GETDATE(),             
vElementFolderName = @vFolderName,                  
vElementFolderDescription =@vFolderDescription              
          
where iFolderId =@iFolderId                
select * from t_CMS_FileSystem_ElementFolder where iFolderId =@iFolderId                     
END                  
End 

GO 

ALTER proc [dbo].[Proc_CMS_AddEditTask_InsertNewKeyWords]                       
                          
(                                
                              
  @tKeyWordsXml ntext,                                
  @iLanguageId int,                                   
  @iMainClientId int                      
)                                                            
AS                                  
BEGIN                                  
declare                                
@g int ,   @vKeyWordName nvarchar(500)  , @iKeyWordId int  ,@iSubjectId int                
                      
/********************************************************************************************                                  
 Created By:       Vidhyut Kediya                            
 Create Date:      9-Jul-2012                        
 Description:      Called on Import excel to insert new keyword.     
     
  Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Modified column list in Insertstatement    
                           
********************************************************************************************/                                
                     
 if(Datalength(@tKeyWordsXml) > 0)                        
 begin                 
EXECUTE sp_xml_preparedocument @g OUTPUT, @tKeyWordsXml            
            
DECLARE cursor_KeyWords CURSOR                                  
        FOR select  Name , SubjectId from  OPENXML(@g, 'KeyWords/KeyWordName') with (Name nvarchar(500) '.' ,SubjectId int '@SubjectId')                           
            
  open cursor_KeyWords             
  Fetch Next From cursor_KeyWords into  @vKeyWordName,@iSubjectId            
     while( @@FETCH_STATUS<>-1)            
     begin            
 insert into t_TestDrive_Task_TaskKeyword(iMainClientId, cIsDeleted, iSubjectId) values (@iMainClientId,'N',@iSubjectId)            
 set @iKeyWordId = @@IDENTITY           
     insert into t_TestDrive_Task_TaskKeyword_Data(iTaskKeywordId,iLanguageId,vTaskKeyword)  values (@iKeyWordId,@iLanguageId,@vKeyWordName)           
  Fetch Next From cursor_KeyWords into  @vKeyWordName  ,@iSubjectId               
  end            
  close cursor_KeyWords                                          
    Deallocate cursor_KeyWords                                          
    EXEC sp_xml_removedocument @g                         
end             
            
end

GO 

ALTER procEDURE [dbo].[Proc_CMS_CMSPage_CopyPasteTask]                                                                     
(                                                                          
 @iPageId INT,                                                                          
 @iDestinationFolderId INT,                                                                          
 @vResourceText NVARCHAR(50),              
 @vCopyName NVARCHAR(Max),      
 @cIsShortCut char(1),      
 @uNewUserId uniqueidentifier                                                                      
)                                                                          
AS                                                                           
 BEGIN transaction                                                                                                                                         
/********************************************************************************************                                                                          
                                                                            
  Created By: Suman Goutham                                                                          
  Created Date: 12.03.2008                                                                          
  Description: Pastes the copied Task                                                                          
      
 Modified By: Arvind K                                           
 Modified Date: 11/08/2020                                         
 Description: Included column list for Insert statements   
                                                                          
********************************************************************************************/                                                                                                                                        
DECLARE @iNewTaskId INT                                                                
       print @vCopyName                                                                       
if(@vCopyName = '')              
begin                
DECLARE @vPageName nvarchar(MAX)                                                              
SELECT @vPageName = [vPageName] FROM  [t_CMS_Page]  where cIsDeleted = 'N' and  [iPageId] = @iPageId               
DECLARE @cExists int                                                              
SET @cExists = 1                                                              
DECLARE @iCount int                                                              
SET @iCount =0                                                           
DECLARE @vTempString nvarchar(50)                                                              
WHILE(@cExists > -1)                                                              
BEGIN                                                              
SET @vCopyName = @vResourceText + ' ' + @vPageName                                                              
IF(@iCount > 0)                                                              
BEGIN                                                              
SET @vTempString = '(' + Convert(nvarchar(max),@iCount) + ')'                                                              
SET @vCopyName = @vCopyName + @vTempString                                                              
END                                                              
IF EXISTS(SELECT * FROM [t_CMS_Page]                                                               
WHERE vPageName = @vCopyname and iFolderId = @iDestinationFolderId and cIsDeleted = 'N' )                                                        
BEGIN                                                              
SET @iCount = @iCount + 1                                                              
END                                             
ELSE               
BEGIN                                                  
SET @cExists = -1         
END                      
END              
END            
 print @vCopyName          
if(@iDestinationFolderId = 0)                                           
BEGIN              
SELECT @iDestinationFolderId = iFolderId FROM  [t_CMS_Page]  where cIsDeleted = 'N' and  [iPageId] = @iPageId               
END              
 if(@cIsShortCut='Y')      
 BEGIN             
INSERT  [t_CMS_Page]                                                   
  (                                                      
  [iPageTemplateId],                                                                
  [iMainClientId],                            
  [iFolderId],                                                                          
  [dtCreatedOn],                                                      
  [dtModifiedOn],                                  
  [cIsDeleted],                                                                          
  [cIsSecure],                                    
  [uUserId],                                  
  [vPageName],                                  
  [vPageDescription] ,                            
  [uPageGuid]  ,      
  [uModifiedById],      
  cIsShortcut,      
  iShortcutToTaskId                               
  )                                                 
SELECT  [iPageTemplateId],                                                                          
  [iMainClientId],                                           
  @iDestinationFolderId,                                                                          
  GETDATE(),                                                                       
  GETDATE(),                                                                          
  [cIsDeleted],                                                                          
  [cIsSecure],                                                                          
  [uUserId],                                  
  @vCopyName,                                  
  [vPageDescription],newid(),uUserId,@cIsShortCut,@iPageId                                                                          
FROM    [t_CMS_Page]                                                                          
WHERE   [iPageId] = @iPageId                                                                           
     END      
  ELSE      
  BEGIN      
  print @vCopyName      
  INSERT  [t_CMS_Page]                                                   
    (                                                      
    [iPageTemplateId],                                                                
    [iMainClientId],                            
    [iFolderId],                                                                          
    [dtCreatedOn],                                                      
    [dtModifiedOn],                                  
    [cIsDeleted],                                                                          
    [cIsSecure],                                    
    [uUserId],                                  
    [vPageName],                                  
    [vPageDescription] ,                            
    [uPageGuid]  ,      
    [uModifiedById]                            
    )                                                 
  SELECT  [iPageTemplateId],                                                                          
    [iMainClientId],                                           
    @iDestinationFolderId,                                                                          
    GETDATE(),                                                                       
    GETDATE(),                                                                          
    [cIsDeleted],                                                                          
    [cIsSecure],                                                                          
    @uNewUserId,                                  
    @vCopyName,                                  
    [vPageDescription],newid(),@uNewUserId                                         
FROM    [t_CMS_Page]                                                                          
WHERE   [iPageId] = @iPageId      
  END      
                                         
SET @iNewTaskId = @@IDENTITY        
print @iNewTaskId      
                  
 INSERT  INTO [t_CMS_Page_Data]                                                      
 (                                                      
  [iPageID],                                                
  [iLanguageId],                                                                          
  [vPageTitle],                            
  [tCorrectAnswerExplanation],iTaskReviewStatusId,tChangeRequest,cPointOverride                                                     
 )                                                                          
SELECT  @iNewTaskId,                                                                          
  [iLanguageId],                                                                       
  [vPageTitle],[tCorrectAnswerExplanation] ,iTaskReviewStatusId,tChangeRequest,cPointOverride                                                                        
 FROM   [t_CMS_Page_Data]                                                                          
 WHERE   [iPageId] = @iPageId                                        
                                                                     
 DECLARE @iNewTaskWorkFlowStatus int                                        
 Declare @iMainClientId int                                        
 select @iMainClientId = iMainClientid from t_CMS_Page where iPageId = @iPageId                                        
 if exists(select * from t_TestDrive_Task_WorkflowStatus where iMainClientId = @iMainClientId)                                        
 begin                                        
 Select top 1  @iNewTaskWorkFlowStatus = iTaskWorkFlowStatusId from t_TestDrive_Task_WorkflowStatus where iMainClientId = @iMainClientId                                        
 order by iTaskWOrkflowStatusId asc                                        
 end                                        
 else                                        
 begin                               
 Select top 1  @iNewTaskWorkFlowStatus = iTaskWorkFlowStatusId from t_TestDrive_Task_WorkflowStatus where iMainClientId = 0                          
 order by iTaskWOrkflowStatusId asc                                        
 end                                        
        INSERT  INTO [t_CMS_PageProperty_TestDrive]                                      
  (                                                      
   [iPageId],                                                                          
   [iSubjectId],                                                                          
   [iCategoryId],                                     
   [iDescriptorId],                                                                          
   [dTaskDifficulty],                                                                          
   [iInputStatusId],                   
   [iTaskTypeId],                                                                       
   [cIsCalibratedActive],                                                                          
   [cHasCalibrationStarted],                                           
   [dCalibratedDifficulty],                                                                          
   [cIsLockedForCalibration],                     
   [dtCalibrationDateTime],                                                                          
   [cIsCalibrationComplete],                                                  
                                              
                                     
   [cIsSeparated],                                              
   [dDiscrimination],                                         
   [iTaskWorkFlowStatusId],                            
   dtWhenInputStatusChanged,                            
   cDifficultyHasBeenInputManually,                            
   cIsSuitableForOnline,                            
   cIsSuitableForPaperPencil,                            
   cIsPaperPencil,                            
   vCustomerTaskId,                            
   iTaskUsageId,                            
   iEstimatedTimeToSolveSolveInSeconds,                      
   iTaskReviewStatusId,tChangeRequest ,cIsDataStoragePlaceholder,cIsForInternalTesting,      
  cShowRandomQuestions,iNumberOfQuestionsPerPage,cIsAdaptiveTask ,iCategoryCompetencyId,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId  ,vSource ,dPoints                                
  )                                                          
 SELECT  @iNewTaskId,                                                                          
   [iSubjectId],                                                                          
   [iCategoryId],                                                                          
   [iDescriptorId],                                                                          
   NULL,                                                                         
   1,                                                                         
   [iTaskTypeId],                                                                          
   'N',                                       
   'N',                                                                          
   [dCalibratedDifficulty],                                                                          
   'N',                                                                          
   NULL,                                                              
   'N',                                                    
                                             
   'N',                                              
   NULL,                                              
   @iNewTaskWorkFlowStatus,                            
   dtWhenInputStatusChanged,                            
   cDifficultyHasBeenInputManually,                            
   cIsSuitableForOnline,                            
   cIsSuitableForPaperPencil,                            
   cIsPaperPencil,                            
   vCustomerTaskId,                            
   iTaskUsageId,                            
   iEstimatedTimeToSolveSolveInSeconds ,iTaskReviewStatusId, tChangeRequest  ,cIsDataStoragePlaceholder,(select cIsForInternalTesting from t_CMS_FileSystem_PageFolder where iPageFolderID =  @iDestinationFolderId),       
    cShowRandomQuestions,iNumberOfQuestionsPerPage,cIsAdaptivetask,iCategoryCompetencyId,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId ,vSource,dPoints      
  FROM    [t_CMS_PageProperty_TestDrive]                                                        
                WHERE   [iPageId] = @iPageId                                                                          
                                                       
   --Copy language Table          
   insert into t_CMS_Page_Language          
   select @iNewTaskId,iLanguageID from t_CMS_Page_Language  WHERE   [iPageId] = @iPageId                                                    
  --Copying the Calibration history                                                      
                                                      
    INSERT INTO t_TestDrive_Test_TaskCalibration                                                      
    (                                                      
   [iTaskId],                                                      
   [iTaskStatusId],                                                      
   [dCalibratedDifficulty],                                           
   [dtCreatedOn],                                                      
   [dNextDifficulty],                             
   [uPupilId],                                                      
   [uTestId],                                                      
   [uTestTokenId],                                                      
   [uClassId]                              
       )                                                        
  SELECT @iNewTaskId,                                         
   [iTaskStatusId],                                                      
   [dCalibratedDifficulty],                                                      
   [dtCreatedOn],                                                      
   [dNextDifficulty],                                                      
   [uPupilId],                                  
   [uTestId],                                                
   [uTestTokenId],                           
   [uClassId]                                    
  FROM t_TestDrive_Test_TaskCalibration where iTaskId = @iPageId                                                         
                                                      
--Copying Keyword data                            
INSERT INTO t_TestDrive_Task_AssignedTaskKeyword(iPageId,iTaskKeywordId)                            
SELECT @iNewTaskId,iTaskKeywordId from t_TestDrive_Task_AssignedTaskKeyword                            
WHERE iPageId = @iPageId                              
     --Copying School year difficulty                            
    INSERT INTO t_TestDrive_Task_AssignedTaskDifficultyLevel(iPageId,iSchoolYearId,iTaskDifficultyLevelId)                            
SELECT @iNewTaskId,iSchoolYearId,iTaskDifficultyLevelId from t_TestDrive_Task_AssignedTaskDifficultyLevel                            
WHERE iPageId = @iPageId        
      
--Copying Additional Task PropertyId                          
    INSERT INTO t_TestDrive_Task_AssignedAdditionalTaskProperty(iPageId,iAdditionalTaskPropertyId,iAdditionalTaskPropertyValueId)                            
SELECT @iNewTaskId,iAdditionalTaskPropertyId,iAdditionalTaskPropertyValueId from t_TestDrive_Task_AssignedAdditionalTaskProperty                            
WHERE iPageId = @iPageId        
      
--copy survey question      
declare @iPageQuestionId int,@iNewPageQuestionId int      
declare cur_lang cursor for select iPageQuestionId from t_Testdrive_Task_Question where iPageId =@iPageId      
open cur_lang       
--fetch next from cur_lang into @iPageQuestionId      
while @@FETCH_STATUS <>-1      
begin      
insert into t_Testdrive_Task_Question(iPageId,vQuestion,iSubjectId,dtCreatedOn,dtModifiedOn,cPolarity,iCategoryId,iDisplayOrder,iLanguageId)      
select @iNewTaskId,vQuestion,iSubjectId,GETDATE(),GETDATE(),cPolarity,iCategoryId,iDisplayOrder,iLanguageId from t_Testdrive_Task_Question      
where iPageQuestionId = @iPageQuestionId      
set @iNewPageQuestionId=@@IDENTITY      
insert into t_Testdrive_Task_Question_Data(iPageQuestionId,vQuestion,iLanguageId)      
select @iNewPageQuestionId,vQuestion,iLanguageId from t_Testdrive_Task_Question_Data      
where iPageQuestionId = @iPageQuestionId      
fetch next from cur_lang into @iPageQuestionId      
end      
close cur_lang      
deallocate cur_lang      
      
--copy assigned workflows      
      
declare @iLanguageId int,@iPageDataID int,@uWorkflowStatusId uniqueidentifier,@vCommnet nvarchar(max),@uUserId uniqueidentifier,@cIsLatest char(1)      
      
 select @uUserId=uUserId from t_cms_page where iPageId = @iPageId      
      
 declare cur_Workflow cursor for select uWorkflowStatusId,iPageDataId,vComment,cIsLatest from t_Cms_Page_AssignedWorkflowStatus where iPageDataId in(Select iPageDataId from t_CMS_Page_Data where iPageID =@iPageId)      
 open cur_Workflow       
 fetch next from cur_Workflow into @uWorkflowStatusId,@iPageDataID,@vCommnet,@cIsLatest      
 while @@FETCH_STATUS <>-1      
 begin      
 if(@cIsLatest='Y')      
  BEGIN      
   set @uUserId = @uNewUserId      
  END      
 insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)      
  select newid(), iPageDataID,@uWorkflowStatusId,@vCommnet,@uUserId,GETDATE(),@cIsLatest from t_CMS_Page_Data where iPageID=@iNewTaskId and iLanguageID in(select iLanguageID from t_CMS_Page_Data where iPageDataID =@iPageDataID)      
       
 fetch next from cur_Workflow into  @uWorkflowStatusId,@iPageDataID,@vCommnet,@cIsLatest      
 end      
 close cur_Workflow      
 deallocate cur_Workflow      
                             
        SELECT  * FROM [t_CMS_Page] P                   
        inner join t_CMS_PageProperty_TestDrive PP on P.iPageId =PP.iPageId WHERE   P.iPageId = @iNewTaskId                                                                        
        SELECT  * FROM [t_CMS_PageProperty_TestDrive] WHERE   iPageId = @iNewTaskId                                 
        SELECT  * FROM [t_CMS_Page_Data] PD      
  inner join t_Cms_Page_AssignedWorkflowStatus WS on PD.iPageDataID = WS.iPageDataId                                                     
    SELECT  * FROM t_TestDrive_Test_TaskCalibration WHERE   iTaskId = @iNewTaskId                           
        SELECT  * FROM t_TestDrive_InputStatus where iInputStatusId =( select top 1 iInputStatusId from [t_CMS_PageProperty_TestDrive] WHERE   iPageId = @iNewTaskId)                                                   
        SELECT  * FROM t_TestDrive_Tasks_Type_Data where iTaskTypeId = (SELECT top 1 iTaskTypeId FROM [t_CMS_PageProperty_TestDrive] WHERE   iPageId = @iNewTaskId)                         
        select * from  t_TestDrive_Task_AssignedTaskDifficultyLevel P      
  inner join t_TestDrive_Task_TaskDifficultyLevel L on P.iTaskDifficultyLevelId = L.iTaskDifficultyLevelId      
  inner join t_TestDrive_Task_TaskDifficultyLevel_Data LD on L.iTaskDifficultyLevelId = LD.iTaskDifficultyLevelId      
   where iPageId = @iNewTaskId         
      
           if(@cIsShortCut='Y')      
     BEGIN      
     select * from  t_CMS_Page_Container where iPageId=  @iPageId  --container info of copied task       
     END      
      ELse      
   BEGIN      
   select * from  t_CMS_Page_Container where iPageId=  @iNewTaskId  --container info of copied task       
   END      
                              
  Commit 

  GO

        
ALTER proc [Proc_CMS_CMSPAGE_JAddEditTaskProperties_AutoName]        
(        
 @vTaskDataXml NTEXT,        
 @vAction NVARCHAR(200),      
 @cEnableTaskNameChangeforlinkedTasks char(1)              
)        
 AS        
 BEGIN  transaction        
 DECLARE @h int        
    DECLARE @iPageId int,@uUserId uniqueidentifier        
     EXECUTE sp_xml_preparedocument @h OUTPUT, @vTaskDataXml        
  select @uUserId = uUserid from OPENXML(@h,'Data',1)with (uUserId uniqueidentifier './uUserId/@value')          
 /*** For Basic Properties **/        
 if(@vAction='New')        
  BEGIN        
   insert into t_CMS_Page(vPageName,vPageDescription,iFolderId,dtCreatedOn,dtModifiedOn,iMainClientId,uUserId,uPageGuid)        
        
 Select  vPageName,vPageDescription,iFolderId,getdate(),getdate(),iMainClientId,uUserId,NEWID()        
 from OPENXML(@h,'Data',1) with (vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',      
 iFolderId int './iFolderId/@value',dtCreatedOn datetime './dtCreatedOn/@value',        
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value')        
 set @iPageId = @@IDENTITY        
           
 insert into t_CMS_PageProperty_TestDrive(iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,        
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,      
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId)       
        
 Select  @iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,        
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,      
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId      
 from OPENXML(@h,'Data',1) with (iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',      
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',iInputStatusId int './iInputStatusId/@value',      
 dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value', cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',      
 iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',      
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',      
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',      
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',      
 cIsForInternalTesting char(1) './cIsForInternalTesting/@value',cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value')        
  END        
  ELSE        
  BEGIN        
            
 select @iPageId = iPageId from OPENXML(@h,'Data',1)with (iPageId int './iPageId/@value')                  
 update T Set T.vPageName = XT.vPageName,T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),        
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId        
 from t_CMS_Page T,OPENXML(@h,'Data',1)        
 with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',      
 dtCreatedOn datetime './dtCreatedOn/@value',        
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT        
 where T.iPageId = XT.iPageId        
           
  update TP set TP.iSubjectId = XTP.iSubjectId,TP.iCategoryId = XTP.iCategoryId,TP.cIsCalibratedActive = XTP.cIsCalibratedActive,      
  TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,      
  TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,        
  TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,      
  TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,      
  TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,      
  TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.iCategoryCompetencyId=XTP.iCategoryCompetencyId,TP.cIsAdaptiveTask = XTP.cIsAdaptiveTask,TP  
    
.iCategoryCompetencyLevelId = XTP.iCategoryCompetencyLevelId,TP.iCategoryCompetencyRangeId = XTP.iCategoryCompetencyRangeId      
  from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)        
  with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',      
  cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',      
  iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',      
  iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',      
  cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',      
  iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',      
  iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',      
  cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value') XTP        
    where TP.iPageId = XTP.iPageId       
       
 if exists(select * from t_CMS_Page where iShortcutToTaskId=@iPageId)      
  BEGIN      
   if(@cEnableTaskNameChangeforlinkedTasks='Y')      
   Begin      
   update T Set T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),        
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',      
 dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT        
 where T.iShortcutToTaskId = XT.iPageId        
 End      
      
 Else      
 BEGIN      
  update T Set T.vPageName = XT.vPageName, T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),        
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',      
 dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT        
 where T.iShortcutToTaskId = XT.iPageId        
 END      
      
 update TP set TP.cIsCalibratedActive = XTP.cIsCalibratedActive,      
 TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,      
 TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,        
 TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,      
 TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,      
 TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,      
 TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.      
 cIsAdaptiveTask = XTP.cIsAdaptiveTask      
 from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)        
 with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',      
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',      
 iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',      
 iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',      
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',      
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',      
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',      
 cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value') XTP        
   where TP.iPageId in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
      
   /************ Adding Languages For linked tasks**************/        
      
 delete from t_CMS_Page_Language where iPageID in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId)      
 declare @iNewPageId int      
 Declare Cur_1 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_1      
 fetch next from Cur_1 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
  insert into t_CMS_Page_Language select @iNewPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')       
 fetch next from Cur_1 into @iNewPageId      
 end      
  close Cur_1      
  deallocate Cur_1      
          
/************ End Adding Languages For linked Task**************/        
      
      
/**********************For Task keyword linked tasks***********/        
        
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
 Declare Cur_2 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_2      
 fetch next from Cur_2 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
  insert into t_Testdrive_Task_AssignedTaskKeyword select @iNewPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')        
 fetch next from Cur_2 into @iNewPageId      
 end      
  close Cur_2      
  deallocate Cur_2      
           
/**********************End ask keyword linked tasks***********/       
      
/**********************For Assigned Additional Property linked tasks***********/        
        
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
 Declare Cur_A cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_A      
 fetch next from Cur_A into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
  insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iNewPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')        
 fetch next from Cur_A into @iNewPageId      
 end      
  close Cur_A      
  deallocate Cur_A      
           
/**********************End ask keyword linked tasks***********/       
      
/**********************For Task DifficultyLevel for linked tasks***********/        
        
 delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
 Declare Cur_3 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_3      
 fetch next from Cur_3 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
   insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iNewPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',TaskDifficultyLevelId int '@TaskDifficultyLevelId')        
 fetch next from Cur_3 into @iNewPageId      
 end      
  close Cur_3      
  deallocate Cur_3      
        
/**********************End Task DifficultyLevel for linked tasks***********/       
      
/**********************For ReviewStatus for linked tasks***********/        
        
   Declare Cur_4 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_4      
 fetch next from Cur_4 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
        
   declare @iStatusLanguageId1 int,@tChangeRequest1 nvarchar(max),@uReviewStatus1 uniqueidentifier,@vTitle1 nvarchar(max),@iPageDataId1 int      
    Declare Cur_PageDataStatus1 cursor      
              
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')       
 open Cur_PageDataStatus1      
 Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1      
 while(@@FETCH_STATUS<>-1)      
 begin      
      
 if exists(select * from  t_CMS_Page_Data where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1)      
 begin      
  print @iStatusLanguageId1      
 update t_CMS_Page_Data set vPageTitle = @vTitle1 where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1      
 select @iPageDataId1 = ipageDataId from t_CMS_Page_Data where iPageID =@iNewPageId and iLanguageID= @iStatusLanguageId1      
 if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus1 and uUserId =@uUserId and cIsLatest='Y' and iPageDataId=@iPageDataId1)      
 BEGIN      
     if(@uReviewStatus1 is not null)      
   BEGIN      
         
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId1      
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
  values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')      
      END      
  END      
 end      
 else      
 begin      
   insert into t_CMS_Page_Data values(@iNewPageId,@iStatusLanguageId1,@vTitle1,null,NULL,NULL,'N',null)      
  set @iPageDataId1=@@IDENTITY      
   if(@uReviewStatus1 is not null)      
   BEGIN      
       insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
    values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')      
      END      
 end      
  Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1      
  end      
  close Cur_PageDataStatus1      
  deallocate Cur_PageDataStatus1      
       
 fetch next from Cur_4 into @iNewPageId      
 end      
  close Cur_4      
  deallocate Cur_4      
      
/**********************End ReviewStatus for linked tasks***********/       
      
      
      
  END      
           
  END        
          
  /**** Basic Properties End ****/        
          
/************ Adding Languages For Task**************/        
 delete from t_CMS_Page_Language where iPageID=@iPageId        
 insert into t_CMS_Page_Language select @iPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')        
        
/************ End Adding Languages For Task**************/        
        
      
/**********************For ReviewStatus***********/        
   declare @iStatusLanguageId int,@tChangeRequest nvarchar(max),@uReviewStatus uniqueidentifier,@vTitle nvarchar(max),@iPageDataId int      
    Declare Cur_PageDataStatus cursor      
              
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')       
 open Cur_PageDataStatus      
 Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle      
 while(@@FETCH_STATUS<>-1)      
 begin      
 print @tChangeRequest      
 if exists(select * from  t_CMS_Page_Data where iPageID = @iPageId and iLanguageID= @iStatusLanguageId)      
 begin      
  print @iStatusLanguageId      
      
 update t_CMS_Page_Data set vPageTitle = @vTitle where iPageID = @iPageId and iLanguageID= @iStatusLanguageId      
  select @iPageDataId = ipageDataId from t_CMS_Page_Data where iPageID =@iPageId and iLanguageID= @iStatusLanguageId      
  if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus and iPageDataId=@iPageDataId and uUserId =@uUserId and cIsLatest='Y')      
 BEGIN      
  If(@uReviewStatus is not null)      
   BEGIN      
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId      
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
   values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')      
      END      
  END      
 end      
 else      
 begin      
   insert into t_CMS_Page_Data values(@iPageId,@iStatusLanguageId,@vTitle,null,NULL,NULL,'N',null)      
  set @iPageDataId=@@IDENTITY      
   If(@uReviewStatus is not null)      
   BEGIN      
         insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
   values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')     
       END      
 end      
  Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle      
  end      
  close Cur_PageDataStatus      
  deallocate Cur_PageDataStatus      
       
      
/**********************ReviewStatus End***********/       
      
      
/**********************For Task keyword***********/        
        
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId=@iPageId        
 insert into t_Testdrive_Task_AssignedTaskKeyword select @iPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')        
        
/**********************Data Task keyword***********/       
      
/**********************For Task Additional Property***********/        
        
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId=@iPageId        
 insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')        
        
/**********************For Task Additional Property***********/       
      
/**********************For Task DifficultyLevel***********/        
        
  delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId=@iPageId        
  insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',      
  TaskDifficultyLevelId int '@TaskDifficultyLevelId')        
        
/**********************Data Task DifficultyLevel***********/       
      
 SELECT  P.*,                        
 PD.*,                        
 PP.*,                        
 PIS.* ,      
 AW.uWorkflowStatusId,AW.cIsLatest                    
 FROM    t_CMS_Page P                        
 LEFT OUTER JOIN t_CMS_Page_Data PD ON P.iPageId = PD.iPageId      
 LEFT OUTER JOIN t_CMS_PageProperty_TestDrive PP ON P.iPageId = PP.iPageId      
 LEFT OUTER JOIN t_Cms_Page_AssignedWorkflowStatus AW on AW.iPageDataId = PD.iPageDataID and AW.cIsLatest='Y'      
 LEFT OUTER JOIN t_TestDrive_InputStatus PIS ON PP.iInputStatusId = PIS.iInputStatusId                     
 WHERE   P.iPageId = @iPageId                        
 Select * from t_CMS_Page_Language where iPageId = @iPageId        
 select * from t_Testdrive_Task_AssignedTaskKeyword where iPageId=  @iPageId       
 select * from t_Testdrive_Task_AssignedTaskDifficultyLevel P      
 inner join t_TestDrive_Task_TaskDifficultyLevel L on P.iTaskDifficultyLevelId = L.iTaskDifficultyLevelId      
 inner join t_TestDrive_Task_TaskDifficultyLevel_Data LD on L.iTaskDifficultyLevelId = LD.iTaskDifficultyLevelId      
  where iPageId=  @iPageId       
 select * from  t_CMS_Page_Container where iPageId=  @iPageId        
 select * from t_CMS_Page where iShortCutToTaskId = @iPageId      
 commit      
      

GO

      
      
ALTER proc [dbo].[JProc_CMS_CMSPAGE_AddEditPageFolderProperties]                
(                
    @iMainClientId int,       
    @uUserId uniqueidentifier,    
 @vDataJson nvarchar(max)    
)                
As                
Begin Transaction          
/********************************************************************************************      
  Created By: Arvind Sharma      
  Created Date: 27.09.2011      
    
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert statements   
********************************************************************************************/             
      
 Declare @iPageFolderId int ,    
   @iParentFolderId int,    
   @iFolderId int,     
   @cIsForInternalTesting char(1),    
   @cIsCreatedByTeacher char(1),     
   @vFolderName nvarchar(200),      
   @vFolderDescription nvarchar(max),       
         @uSkinId  uniqueidentifier    
       
select @iFolderId=iPageFolderID,@iParentFolderId=iPageParentFolderID,@vFolderName =vPageFolderName,@vFolderDescription =vPageFolderDescription,@uSkinId=uSkinId,@cIsCreatedByTeacher=cIsCreatedByTeacher    
from openjson(@vDataJson) with (iPageFolderID int, iPageParentFolderID int,vPageFolderName nvarchar(500),vPageFolderDescription nvarchar(max),uSkinId uniqueidentifier,cIsCreatedByTeacher char(1))    
       
 if(@iFolderId=-1)             
  BEGIN         
   Declare @iNewFolderId int       
   Insert into t_CMS_FileSystem_PageFolder(iPageParentFolderID, iMainClientId, dtCreatedOn, dtModifiedOn, cIsDeleted, vPageFolderName, vPageFolderDescription, uUserId, cIsForInternalTesting, uSkinId, cIsCreatedByTeacher)   
   
    values(@iParentFolderId,@iMainClientId,GETDATE(),GETDATE(),'N',@vFolderName,@vFolderDescription,@uUserId,@cIsForInternalTesting,@uSkinId,@cIsCreatedByTeacher)      
   set @iNewFolderId =@@IDENTITY           
   set @iPageFolderId = @iNewFolderId                
   --select * from t_CMS_FileSystem_PageFolder where iPageFolderID =@iNewFolderId      
  END             
 ELSE             
  BEGIN             
   WITH PageFolderLevels (iPageFolderId)            
   AS            
     (            
     -- Parent member definition            
   SELECT iPageFolderId            
   FROM t_CMS_FileSystem_PageFolder             
   WHERE iPageFolderId = @iFolderId            
   UNION ALL            
     -- Recursive member definition            
   SELECT P.iPageFolderId            
   FROM t_CMS_FileSystem_PageFolder P            
   INNER JOIN PageFolderLevels AS F            
   ON P.iPageParentFolderId = F.iPageFolderId                
     )          
             
   -- Statement that executes the CTE and inserts the value into the Temp Table          
            SELECT iPageFolderId into #tbl_PageFolders FROM PageFolderLevels  OPTION (MAXRECURSION 0)          
         
   --- updates the Folders in All the Levels for cIsForInternaltesting attributes.            
   if exists(select * from t_CMS_FileSystem_PageFolder P where iPageParentFolderID in(select iPageFolderId from #tbl_PageFolders))      
   BEGIN      
            Update PF SET PF.cIsForInternalTesting=@cIsForInternalTesting             
   FROM #tbl_PageFolders FL,t_CMS_FileSystem_PageFolder PF            
   where FL.iPageFolderId = PF.iPageFolderId               
   END      
   --- updates the tasks in All the Levels for cIsForInternaltesting attributes.        
   if exists(select * from t_CMS_Page P where iFolderId in(select iPageFolderId from #tbl_PageFolders))      
   BEGIN          
    Update TP SET TP.cIsForInternalTesting=@cIsForInternalTesting            
    FROM #tbl_PageFolders F,t_CMS_PageProperty_TestDrive TP            
    inner join t_CMS_Page P on P.iPageId =TP.iPageId        
    where F.iPageFolderId = P.iFolderId         
   END         
            --- Drop the Temp Table            
            Drop Table #tbl_PageFolders                 
      
   UPDATE t_CMS_FileSystem_PageFolder       
   SET dtModifiedOn=GETDATE(),vPageFolderName = @vFolderName,vPageFolderDescription =@vFolderDescription ,cIsForInternalTesting =@cIsForInternalTesting, uSkinId =@uSkinId,uModifiedById=@uUserId       
   where iPageFolderID =@iFolderId      
      
   set @iPageFolderId = @iFolderId      
   --select * from t_CMS_FileSystem_PageFolder where iPageFolderId =@iFolderId                
  END      
      
  --Adding in language table                
  DELETE FROM t_CMS_FileSystem_PageFolder_Langauge WHERE iPageFolderId = @iPageFolderId          
  insert into t_CMS_FileSystem_PageFolder_Langauge select @iPageFolderId,value from OPENJSON (@vDataJson, '$.Languages')      
      
 declare @iLanguageId int ,@vTitle nvarchar(max),@vLanguageJson nvarchar(max)    
 Declare Cur_Title cursor For select value from OPENJSON (@vDataJson, '$.Data')      
 open Cur_Title        
 Fetch next from Cur_Title into @vLanguageJson       
 while(@@FETCH_STATUS<>-1)        
 begin     
 select @iLanguageId = [key], @vTitle=value from openjson(@vLanguageJson)       
 if exists(select * from  t_CMS_FileSystem_PageFolder_data where iPageFolderId = @iPageFolderId and iLanguageID= @iLanguageId)        
 begin    
     
 update t_CMS_FileSystem_PageFolder_data set vPageFolderTitle = @vTitle where iPageFolderId = @iPageFolderId and iLanguageId= @iLanguageId        
 End    
 else        
 begin        
     
 insert into t_CMS_FileSystem_PageFolder_data values (@iPageFolderId,@iLanguageId,@vTitle)    
     
   END        
   Fetch next from Cur_Title into @vLanguageJson            
 END        
       
  close Cur_Title        
  deallocate Cur_Title      
    
    
  select(select PF.iPageFolderID,PF.iPageParentFolderID,PF.iMainClientId,PF.dtCreatedOn,PF.dtModifiedOn,PF.cIsDeleted,PF.vPageFolderName,PF.vPageFolderDescription,PF.uUserId,PF.cIsForInternalTesting,PF.uSkinId,PF.cIsCreatedByTeacher,PF.uModifiedById ,PFD 
  
   
.iLanguageId,PFD.vPageFolderTitle for json path, INCLUDE_NULL_VALUES,without_array_wrapper)                    
   as JSONResult from t_CMS_FileSystem_PageFolder PF        
   inner join t_CMS_FileSystem_PageFolder_Data PFD on PF.iPageFolderID = PFD.iPageFolderID        
   where PF.iMainClientId=@iMainClientId and PF.cIsDeleted='N'          
   and PF.iPageFolderId=@iPageFolderId    
    
   Commit 

   GO

           
ALTER proc [dbo].[Proc_CMS_AddEditTask_InsertNewCategories]                       
                        
(                              
                            
  @tCategoryXml ntext,                              
  @iLanguageId int,                                 
  @iMainClientId int                    
)                                                          
AS                                
BEGIN                                
declare                              
@g int ,@iSubjectId int,   @vCategoryName nvarchar(500)  , @iDisplayOrder int, @iCategoryId int          
                    
/********************************************************************************************                                
 Created By:       Vidhyut Kediya                          
 Create Date:      6-Jul-2012                      
 Description:      Called on Import Task Excel, it inserts categories for subject.            
     
  Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert Statement    
                         
********************************************************************************************/                              
                   
 if(Datalength(@tCategoryXml) > 0)                      
 begin               
EXECUTE sp_xml_preparedocument @g OUTPUT, @tCategoryXml          
          
DECLARE cursor_Category CURSOR                                
        FOR select  *                                
            from  OPENXML(@g, 'Categories/Category') with (                
            Id int './@SubjectId', Name nvarchar(500) '.')                               
          
  open cursor_Category           
  Fetch Next From cursor_Category into  @iSubjectId, @vCategoryName          
     while( @@FETCH_STATUS<>-1)          
     begin          
     set @iDisplayOrder = (select MAX(iDisplayOrder) from t_TestDrive_Category)          
     insert into t_TestDrive_Category(iSubjectId, iMainClientId, cIsDeleted, iDisplayOrder)    
   values (@iSubjectId,@iMainClientId,'N',@iDisplayOrder+1)          
     set @iCategoryId = @@IDENTITY          
     insert into t_TestDrive_Category_Data (iCategoryId,iLanguageId,vCategoryName)values (@iCategoryId,@iLanguageId,@vCategoryName)          
               
  Fetch Next From cursor_Category into  @iSubjectId, @vCategoryName              
  end          
  close cursor_Category                                        
    Deallocate cursor_Category                                        
    EXEC sp_xml_removedocument @g                       
end           
          
end 

GO 

      
      
ALTER proc [dbo].[JProc_CMS_CMSPAGE_AddEditPageFolderProperties]                
(                
    @iMainClientId int,       
    @uUserId uniqueidentifier,    
 @vDataJson nvarchar(max)    
)                
As                
Begin Transaction          
/********************************************************************************************      
  Created By: Arvind Sharma      
  Created Date: 27.09.2011      
    
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert statements   
********************************************************************************************/             
      
 Declare @iPageFolderId int ,    
   @iParentFolderId int,    
   @iFolderId int,     
   @cIsForInternalTesting char(1),    
   @cIsCreatedByTeacher char(1),     
   @vFolderName nvarchar(200),      
   @vFolderDescription nvarchar(max),       
         @uSkinId  uniqueidentifier    
       
select @iFolderId=iPageFolderID,@iParentFolderId=iPageParentFolderID,@vFolderName =vPageFolderName,@vFolderDescription =vPageFolderDescription,@uSkinId=uSkinId,@cIsCreatedByTeacher=cIsCreatedByTeacher    
from openjson(@vDataJson) with (iPageFolderID int, iPageParentFolderID int,vPageFolderName nvarchar(500),vPageFolderDescription nvarchar(max),uSkinId uniqueidentifier,cIsCreatedByTeacher char(1))    
       
 if(@iFolderId=-1)             
  BEGIN         
   Declare @iNewFolderId int       
   Insert into t_CMS_FileSystem_PageFolder(iPageParentFolderID, iMainClientId, dtCreatedOn, dtModifiedOn, cIsDeleted, vPageFolderName, vPageFolderDescription, uUserId, cIsForInternalTesting, uSkinId, cIsCreatedByTeacher)   
   
    values(@iParentFolderId,@iMainClientId,GETDATE(),GETDATE(),'N',@vFolderName,@vFolderDescription,@uUserId,@cIsForInternalTesting,@uSkinId,@cIsCreatedByTeacher)      
   set @iNewFolderId =@@IDENTITY           
   set @iPageFolderId = @iNewFolderId                
   --select * from t_CMS_FileSystem_PageFolder where iPageFolderID =@iNewFolderId      
  END             
 ELSE             
  BEGIN             
   WITH PageFolderLevels (iPageFolderId)            
   AS            
     (            
     -- Parent member definition            
   SELECT iPageFolderId            
   FROM t_CMS_FileSystem_PageFolder             
   WHERE iPageFolderId = @iFolderId            
   UNION ALL            
     -- Recursive member definition            
   SELECT P.iPageFolderId            
   FROM t_CMS_FileSystem_PageFolder P            
   INNER JOIN PageFolderLevels AS F            
   ON P.iPageParentFolderId = F.iPageFolderId                
     )          
             
   -- Statement that executes the CTE and inserts the value into the Temp Table          
            SELECT iPageFolderId into #tbl_PageFolders FROM PageFolderLevels  OPTION (MAXRECURSION 0)          
         
   --- updates the Folders in All the Levels for cIsForInternaltesting attributes.            
   if exists(select * from t_CMS_FileSystem_PageFolder P where iPageParentFolderID in(select iPageFolderId from #tbl_PageFolders))      
   BEGIN      
            Update PF SET PF.cIsForInternalTesting=@cIsForInternalTesting             
   FROM #tbl_PageFolders FL,t_CMS_FileSystem_PageFolder PF            
   where FL.iPageFolderId = PF.iPageFolderId               
   END      
   --- updates the tasks in All the Levels for cIsForInternaltesting attributes.        
   if exists(select * from t_CMS_Page P where iFolderId in(select iPageFolderId from #tbl_PageFolders))      
   BEGIN          
    Update TP SET TP.cIsForInternalTesting=@cIsForInternalTesting            
    FROM #tbl_PageFolders F,t_CMS_PageProperty_TestDrive TP            
    inner join t_CMS_Page P on P.iPageId =TP.iPageId        
    where F.iPageFolderId = P.iFolderId         
   END         
            --- Drop the Temp Table            
            Drop Table #tbl_PageFolders                 
      
   UPDATE t_CMS_FileSystem_PageFolder       
   SET dtModifiedOn=GETDATE(),vPageFolderName = @vFolderName,vPageFolderDescription =@vFolderDescription ,cIsForInternalTesting =@cIsForInternalTesting, uSkinId =@uSkinId,uModifiedById=@uUserId       
   where iPageFolderID =@iFolderId      
      
   set @iPageFolderId = @iFolderId      
   --select * from t_CMS_FileSystem_PageFolder where iPageFolderId =@iFolderId                
  END      
      
  --Adding in language table                
  DELETE FROM t_CMS_FileSystem_PageFolder_Langauge WHERE iPageFolderId = @iPageFolderId          
  insert into t_CMS_FileSystem_PageFolder_Langauge select @iPageFolderId,value from OPENJSON (@vDataJson, '$.Languages')      
      
 declare @iLanguageId int ,@vTitle nvarchar(max),@vLanguageJson nvarchar(max)    
 Declare Cur_Title cursor For select value from OPENJSON (@vDataJson, '$.Data')      
 open Cur_Title        
 Fetch next from Cur_Title into @vLanguageJson       
 while(@@FETCH_STATUS<>-1)        
 begin     
 select @iLanguageId = [key], @vTitle=value from openjson(@vLanguageJson)       
 if exists(select * from  t_CMS_FileSystem_PageFolder_data where iPageFolderId = @iPageFolderId and iLanguageID= @iLanguageId)        
 begin    
     
 update t_CMS_FileSystem_PageFolder_data set vPageFolderTitle = @vTitle where iPageFolderId = @iPageFolderId and iLanguageId= @iLanguageId        
 End    
 else        
 begin        
     
 insert into t_CMS_FileSystem_PageFolder_data values (@iPageFolderId,@iLanguageId,@vTitle)    
     
   END        
   Fetch next from Cur_Title into @vLanguageJson            
 END        
       
  close Cur_Title        
  deallocate Cur_Title      
    
    
  select(select PF.iPageFolderID,PF.iPageParentFolderID,PF.iMainClientId,PF.dtCreatedOn,PF.dtModifiedOn,PF.cIsDeleted,PF.vPageFolderName,PF.vPageFolderDescription,PF.uUserId,PF.cIsForInternalTesting,PF.uSkinId,PF.cIsCreatedByTeacher,PF.uModifiedById ,PFD 
  
   
.iLanguageId,PFD.vPageFolderTitle for json path, INCLUDE_NULL_VALUES,without_array_wrapper)                    
   as JSONResult from t_CMS_FileSystem_PageFolder PF        
   inner join t_CMS_FileSystem_PageFolder_Data PFD on PF.iPageFolderID = PFD.iPageFolderID        
   where PF.iMainClientId=@iMainClientId and PF.cIsDeleted='N'          
   and PF.iPageFolderId=@iPageFolderId    
    
   Commit 

   GO

   ALTER proc [Proc_CMS_CMSPAGE_JAddEditTaskProperties]                                  
(                                  
 @vTaskDataXml NTEXT,                                  
 @vAction NVARCHAR(200),                                
 @cEnableTaskNameChangeforlinkedTasks char(1)                                        
)                                  
 AS                                  
 BEGIN  transaction                                  
 DECLARE @h int                                  
    DECLARE @iPageId int,@uUserId uniqueidentifier,@AutoName nvarchar(max),@iMainClientId int,@iMax int                                  
     EXECUTE sp_xml_preparedocument @h OUTPUT, @vTaskDataXml                                  
  select @uUserId = uUserid from OPENXML(@h,'Data',1)with (uUserId uniqueidentifier './uUserId/@value')                                    
 /*** For Basic Properties **/                                  
 select @AutoName = AutoName,@iMainClientId =iMainClientId   from OPENXML(@h,'Data',1) with (AutoName NVARCHAR(2000) './AutoName/@value',iMainClientId int './iMainClientId/@value')                               
 if(@vAction='New')                                  
  BEGIN                                  
   insert into t_CMS_Page(vPageName,vPageDescription,iFolderId,dtCreatedOn,dtModifiedOn,iMainClientId,uUserId,uPageGuid)                                  
                                  
 Select  vPageName,vPageDescription,iFolderId,getdate(),getdate(),iMainClientId,uUserId,NEWID()                                  
 from OPENXML(@h,'Data',1) with (vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',                                
 iFolderId int './iFolderId/@value',dtCreatedOn datetime './dtCreatedOn/@value',                                  
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value')                                  
 set @iPageId = @@IDENTITY                                  
                                     
 insert into t_CMS_PageProperty_TestDrive(iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,                                  
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,                                
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId,iIntermediateId)                                 
                                  
 Select  @iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,                                  
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,                                
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId,iIntermediateId                                
 from OPENXML(@h,'Data',1) with (iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',                                
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',iInputStatusId int './iInputStatusId/@value',                                
 dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value', cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',                  
 iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',                                
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',                                
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',                                
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',                                
 cIsForInternalTesting char(1) './cIsForInternalTesting/@value',cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value',                     
 cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',                    
 iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value',iIntermediateId int './iIntermediateId/@value')                                  
  END                                  
  ELSE                                  
  BEGIN                                  
                                      
 select @iPageId = iPageId from OPENXML(@h,'Data',1)with (iPageId int './iPageId/@value')                                  
                                      
 update T Set T.vPageName = XT.vPageName,T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                                  
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId                                  
 from t_CMS_Page T,OPENXML(@h,'Data',1)                                  
 with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',                                
 dtCreatedOn datetime './dtCreatedOn/@value',                                  
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT                                  
 where T.iPageId = XT.iPageId                                  
                                     
  update TP set TP.iSubjectId = XTP.iSubjectId,TP.iCategoryId = XTP.iCategoryId,TP.cIsCalibratedActive = XTP.cIsCalibratedActive,                                
  TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,                                
  TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,                                  
  TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,                                
  TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,                                
  TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,                                
  TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.iCategoryCompetencyId=XTP.iCategoryCompetencyId                    
  ,TP.cIsAdaptiveTask = XTP.cIsAdaptiveTask,TP.iCategoryCompetencyLevelId = XTP.iCategoryCompetencyLevelId,TP.iCategoryCompetencyRangeId = XTP.iCategoryCompetencyRangeId ,TP.iIntermediateId = XTP.iIntermediateId                     
  from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)                                
  with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',                                
  cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',                                
  iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',                                
  iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',                                
  cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',                                
  iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',                                
  iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',                                
  cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',                    
  cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value',iIntermediateId int './iIntermediateId/@value') XTP            
  
     
      
                     
    where TP.iPageId = XTP.iPageId                                 
                             
 if exists(select * from t_CMS_Page where iShortcutToTaskId=@iPageId)                                
  BEGIN                                
   if(@cEnableTaskNameChangeforlinkedTasks='Y')                                
  Begin                                
   update T Set T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                                  
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value'       
  
    
      
        
          
            
             
 ,iFolderId int './iFolderId/@value',           dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT                          
  
    
      
        
 where T.iShortcutToTaskId = XT.iPageId                                  
 End                                
                                
 Else                                
 BEGIN                                
  update T Set T.vPageName = XT.vPageName, T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),                                  
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value'                    
 ,vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',                                
 dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT                             
 where T.iShortcutToTaskId = XT.iPageId                          
 END                                
                                
 update TP set TP.cIsCalibratedActive = XTP.cIsCalibratedActive,                        
 TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,               
 TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,                                  
 TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,                                
 TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,                                
 TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,                                
 TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.                                
 cIsAdaptiveTask = XTP.cIsAdaptiveTask                                
 from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)                               
 with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',                                
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',                                
 iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',                                
 iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',                                
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',                                
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',                                
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',         cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value',                     
 cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',                    
iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value',iIntermediateId int './iIntermediateId/@value') XTP                                  
   where TP.iPageId in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
                                
   /************ Adding Languages For linked tasks**************/                                  
                                
 delete from t_CMS_Page_Language where iPageID in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId)                                
 declare @iNewPageId int                                
 Declare Cur_1 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_1                                
 fetch next from Cur_1 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
  insert into t_CMS_Page_Language select @iNewPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')                                 
 fetch next from Cur_1 into @iNewPageId                                
 end                                
  close Cur_1                                
  deallocate Cur_1                                
                         
/************ End Adding Languages For linked Task**************/                                  
                                
                                
/**********************For Task keyword linked tasks***********/                                  
                    
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
 Declare Cur_2 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_2                                
 fetch next from Cur_2 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                    
  insert into t_Testdrive_Task_AssignedTaskKeyword select @iNewPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')                                  
 fetch next from Cur_2 into @iNewPageId                                
 end                                
  close Cur_2                                
deallocate Cur_2                                
                                     
/**********************End ask keyword linked tasks***********/                                 
                                
/**********************For Assigned Additional Property linked tasks***********/                                  
                                  
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
 Declare Cur_A cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                     
 open Cur_A                                
 fetch next from Cur_A into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
  insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iNewPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')                                  
 fetch next from Cur_A into @iNewPageId                                
 end                                
  close Cur_A                                
  deallocate Cur_A                                
                                     
/**********************End ask keyword linked tasks***********/                                 
                                
/**********************For Task DifficultyLevel for linked tasks***********/                                  
                                  
 delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')                                
 Declare Cur_3 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_3                                
 fetch next from Cur_3 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
   insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iNewPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',TaskDifficultyLevelId int '@TaskDifficultyLevelId')       
  
             
                        
                          
 fetch next from Cur_3 into @iNewPageId                                
 end                                
  close Cur_3        
  deallocate Cur_3                                
                                  
/**********************End Task DifficultyLevel for linked tasks***********/                                 
                                
/**********************For ReviewStatus for linked tasks***********/                                  
                                  
   Declare Cur_4 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'                                
 open Cur_4                                
 fetch next from Cur_4 into @iNewPageId                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
                                  
   declare @iStatusLanguageId1 int,@tChangeRequest1 nvarchar(max),@uReviewStatus1 uniqueidentifier,@vTitle1 nvarchar(max),@iPageDataId1 int                                
    Declare Cur_PageDataStatus1 cursor                                
                                        
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')                                 
 open Cur_PageDataStatus1                                
 Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
                                
 if exists(select * from  t_CMS_Page_Data where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1)                                
 begin                                
  print @iStatusLanguageId1                                
 update t_CMS_Page_Data set vPageTitle = @vTitle1 where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1                                
 select @iPageDataId1 = ipageDataId from t_CMS_Page_Data where iPageID =@iNewPageId and iLanguageID= @iStatusLanguageId1                                
 if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus1 and uUserId =@uUserId and cIsLatest='Y' and iPageDataId=@iPageDataId1)                                
 BEGIN                                
     if(@uReviewStatus1 is not null)                                
   BEGIN                                
                                   
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId1                                
     insert into t_Cms_Page_AssignedWorkflowStatus  (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
  values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')                                  
      END                                
  END                                
 end                                
 else                                
 begin                                
   insert into t_CMS_Page_Data values(@iNewPageId,@iStatusLanguageId1,@vTitle1,null,NULL,NULL,'N',null)                                
  set @iPageDataId1=@@IDENTITY                                
   if(@uReviewStatus1 is not null)                                
   BEGIN                                
       insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
    values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')                               
END                                
 end                                
  Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1                                
  end                                
  close Cur_PageDataStatus1                                
  deallocate Cur_PageDataStatus1                                
                        
 fetch next from Cur_4 into @iNewPageId                                
 end                                
  close Cur_4                                
  deallocate Cur_4                                
                                
/**********************End ReviewStatus for linked tasks***********/                                 
                                
                                
                                
  END                                
                                     
  END                                  
                                    
  /**** Basic Properties End ****/                                  
                                    
/************ Adding Languages For Task**************/                                  
 delete from t_CMS_Page_Language where iPageID=@iPageId                                  
 insert into t_CMS_Page_Language select @iPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')                                  
                                  
/************ End Adding Languages For Task**************/                                  
                                  
                                
/**********************For ReviewStatus***********/                                  
   declare @iStatusLanguageId int,@tChangeRequest nvarchar(max),@uReviewStatus uniqueidentifier,@vTitle nvarchar(max),@iPageDataId int                                
    Declare Cur_PageDataStatus cursor                                
                                        
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')                                 
 open Cur_PageDataStatus                                
 Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle                                
 while(@@FETCH_STATUS<>-1)                                
 begin                                
 print @tChangeRequest                                
 if exists(select * from  t_CMS_Page_Data where iPageID = @iPageId and iLanguageID= @iStatusLanguageId)                                
 begin                                
  print @iStatusLanguageId                                
                             
 update t_CMS_Page_Data set vPageTitle = @vTitle where iPageID = @iPageId and iLanguageID= @iStatusLanguageId                                
  select @iPageDataId = ipageDataId from t_CMS_Page_Data where iPageID =@iPageId and iLanguageID= @iStatusLanguageId                                
  if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus and iPageDataId=@iPageDataId and uUserId =@uUserId and cIsLatest='Y')                                
 BEGIN                                
  If(@uReviewStatus is not null)                                
   BEGIN                                
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId                                
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
  values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')                               
      END                  
  END                                
 end                                
 else                                
 begin                                
   insert into t_CMS_Page_Data values(@iPageId,@iStatusLanguageId,@vTitle,null,NULL,NULL,'N',null)                                
  set @iPageDataId=@@IDENTITY                                
   If(@uReviewStatus is not null)                                
   BEGIN                                
         insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
   values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')                                
       END                                
 end                                
  Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle                                
  end                                
  close Cur_PageDataStatus                                
  deallocate Cur_PageDataStatus                                
                                 
                                
/**********************ReviewStatus End***********/                                 
                                
                                
/**********************For Task keyword***********/                                  
                                  
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId=@iPageId                                  
 insert into t_Testdrive_Task_AssignedTaskKeyword select @iPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')                                  
                                  
/**********************Data Task keyword***********/                                 
                                
/**********************For Task Additional Property***********/                                  
                                  
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId=@iPageId                                  
 insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')                                  
                                  
/**********************For Task Additional Property***********/                                 
          
/**********************For Task DifficultyLevel***********/                                  
                                  
  delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId=@iPageId                                  
  insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',                                
  TaskDifficultyLevelId int '@TaskDifficultyLevelId')                                  
                                  
/**********************Data Task DifficultyLevel***********/                                 
                                
/*******************Generate AutoName**************************/                              
                        
 if(@iMainClientId=115 or @iMainClientId = 97)                              
              
 BEGIN                            
 DECLARE @iIndex int                       
 Declare  @vMaxName nvarchar(max)                        
   if(SUBSTRING(@AutoName,1,4)='NMG_')                        
    BEGIN                        
  set @iIndex=12                        
 END                        
   else                        
 BEGIN                        
  set @iIndex=11                        
 END                         
 IF(@vAction='New')                              
 begin                            
                           
                          
IF exists(select *   from t_CMS_PageProperty_TestDrive  PT                              
inner join t_cms_page p on P.iPageId = PT.iPageId                              
where vCustomerTaskId like @AutoName+'_%'  and iMainClientId = @iMainClientId)                      
BEGIN                
                 
                 
 select @iMax = max(Convert(int, SUBSTRING(vCustomerTaskId,@iIndex,len(vCustomerTaskId))))+1 from t_CMS_PageProperty_TestDrive  PT                              
 inner join t_cms_page p on P.iPageId = PT.iPageId                              
 where vCustomerTaskId like @AutoName+'%'                           
                           
                 
                             
 Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_'+CONVERT(nvarchar(50),@iMax) where iPageId = @iPageId                        
 END                           
 ELSE                          
 BEGIN                          
 Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_1' where iPageId = @iPageId                             
 END                END       
       
                            
 ELSE                             
 BEGIN                              
 declare @vCus nvarchar(max)                              
 select @vCus =vCustomerTaskId  from t_CMS_PageProperty_TestDrive where iPageId = @iPageId                              
 if exists(select *   from t_CMS_PageProperty_TestDrive where vCustomerTaskId like @AutoName+'_%'  and iPageId = @iPageId)                      
 BEGIN                      
 Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_'+SUBSTRING(@vCus, @iIndex,len(@vCus)) where iPageId = @iPageId                              
 END                      
 ELSE                      
  BEGIN                      
 if exists(select *   from t_CMS_PageProperty_TestDrive  PT                              
 inner join t_cms_page p on P.iPageId = PT.iPageId                              
 where vCustomerTaskId like @AutoName+'_%'  and iMainClientId = @iMainClientId)                          
 BEGIN                          
   select @iMax = max(Convert(int, SUBSTRING(vCustomerTaskId,@iIndex,len(vCustomerTaskId))))+1 from t_CMS_PageProperty_TestDrive  PT                              
 inner join t_cms_page p on P.iPageId = PT.iPageId                              
 where vCustomerTaskId like @AutoName+'%'                            
                             
  Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_'+CONVERT(nvarchar(50),@iMax) where iPageId = @iPageId                              
  END                           
  ELSE                          
  BEGIN                          
  Update t_CMS_PageProperty_TestDrive set vCustomerTaskId = @AutoName+'_1' where iPageId = @iPageId                             
  END                      
 END                      
 END                              
                                 
 END                              
                             
/**************************************************************/                              
                              
 SELECT  P.*,                                                  
 PD.*,                                                  
 PP.*,                                                  
 PIS.* ,                                
 AW.uWorkflowStatusId,AW.cIsLatest                                              
 FROM    t_CMS_Page P                                                  
 LEFT OUTER JOIN t_CMS_Page_Data PD ON P.iPageId = PD.iPageId                                
 LEFT OUTER JOIN t_CMS_PageProperty_TestDrive PP ON P.iPageId = PP.iPageId                                
 LEFT OUTER JOIN t_Cms_Page_AssignedWorkflowStatus AW on AW.iPageDataId = PD.iPageDataID and AW.cIsLatest='Y'                                
 LEFT OUTER JOIN t_TestDrive_InputStatus PIS ON PP.iInputStatusId = PIS.iInputStatusId                                               
 WHERE   P.iPageId = @iPageId                          
 Select * from t_CMS_Page_Language where iPageId = @iPageId                                  
 select * from t_Testdrive_Task_AssignedTaskKeyword where iPageId=  @iPageId                                 
 select * from t_Testdrive_Task_AssignedTaskDifficultyLevel P                                
 inner join t_TestDrive_Task_TaskDifficultyLevel L on P.iTaskDifficultyLevelId = L.iTaskDifficultyLevelId                                
 inner join t_TestDrive_Task_TaskDifficultyLevel_Data LD on L.iTaskDifficultyLevelId = LD.iTaskDifficultyLevelId                                
  where iPageId=  @iPageId                                 
 select * from  t_CMS_Page_Container where iPageId=  @iPageId                                  
 select * from t_CMS_Page where iShortCutToTaskId = @iPageId                     
                     
  select PDA.iPageId, max(iInputStatusId) [MaxInputStatus], min(iInputStatusId) [MinInputStatus] from t_TestDrive_SeparationAndCalibration_Task PA                            
   inner join t_CMS_Page PDA on PA.iTaskId =PDA.iPageID                              
   where PDA.iPageId = @iPageId                         
    group by PDA.iPageId                    
                          
commit 

GO

      
ALTER proc [Proc_CMS_CMSPAGE_JAddEditTaskProperties_AutoName]        
(        
 @vTaskDataXml NTEXT,        
 @vAction NVARCHAR(200),      
 @cEnableTaskNameChangeforlinkedTasks char(1)              
)        
 AS        
 BEGIN  transaction        
 DECLARE @h int        
    DECLARE @iPageId int,@uUserId uniqueidentifier        
     EXECUTE sp_xml_preparedocument @h OUTPUT, @vTaskDataXml        
  select @uUserId = uUserid from OPENXML(@h,'Data',1)with (uUserId uniqueidentifier './uUserId/@value')          
 /*** For Basic Properties **/        
 if(@vAction='New')        
  BEGIN        
   insert into t_CMS_Page(vPageName,vPageDescription,iFolderId,dtCreatedOn,dtModifiedOn,iMainClientId,uUserId,uPageGuid)        
        
 Select  vPageName,vPageDescription,iFolderId,getdate(),getdate(),iMainClientId,uUserId,NEWID()        
 from OPENXML(@h,'Data',1) with (vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',      
 iFolderId int './iFolderId/@value',dtCreatedOn datetime './dtCreatedOn/@value',        
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value')        
 set @iPageId = @@IDENTITY        
           
 insert into t_CMS_PageProperty_TestDrive(iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,        
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,      
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId)       
        
 Select  @iPageId,iSubjectId,iCategoryId,cIsCalibratedActive,cIsCalibrationComplete,cIsSeparated,iInputStatusId,dTaskDifficulty,cDifficultyHasBeenInputManually,        
 iTaskWorkflowStatusId,iTaskTypeId,uSkinId,cIsSuitableForOnline,cIsSuitableForPaperPencil,cIsPaperPencil,vCustomerTaskId,iTaskUsageId,iEstimatedTimeToSolveSolveInSeconds,vSource,iTaskReviewStatusId,      
 cIsForInternalTesting,cIsDataStoragePlaceholder, cIsCreatedByTeacher,iCategoryCompetencyId,cIsAdaptiveTask,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId      
 from OPENXML(@h,'Data',1) with (iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',      
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',iInputStatusId int './iInputStatusId/@value',      
 dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value', cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',      
 iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',      
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',      
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',      
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',      
 cIsForInternalTesting char(1) './cIsForInternalTesting/@value',cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value')        
  END        
  ELSE        
  BEGIN        
            
 select @iPageId = iPageId from OPENXML(@h,'Data',1)with (iPageId int './iPageId/@value')                  
 update T Set T.vPageName = XT.vPageName,T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),        
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId        
 from t_CMS_Page T,OPENXML(@h,'Data',1)        
 with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',      
 dtCreatedOn datetime './dtCreatedOn/@value',        
 dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT        
 where T.iPageId = XT.iPageId        
           
  update TP set TP.iSubjectId = XTP.iSubjectId,TP.iCategoryId = XTP.iCategoryId,TP.cIsCalibratedActive = XTP.cIsCalibratedActive,      
  TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,      
  TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,        
  TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,      
  TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,      
  TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,      
  TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.iCategoryCompetencyId=XTP.iCategoryCompetencyId,TP.cIsAdaptiveTask = XTP.cIsAdaptiveTask,TP  
    
.iCategoryCompetencyLevelId = XTP.iCategoryCompetencyLevelId,TP.iCategoryCompetencyRangeId = XTP.iCategoryCompetencyRangeId      
  from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)        
  with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',      
  cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',      
  iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',      
  iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',      
  cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',      
  iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',      
  iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',      
  cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value') XTP        
    where TP.iPageId = XTP.iPageId       
       
 if exists(select * from t_CMS_Page where iShortcutToTaskId=@iPageId)      
  BEGIN      
   if(@cEnableTaskNameChangeforlinkedTasks='Y')      
   Begin      
   update T Set T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),        
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',      
 dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT        
 where T.iShortcutToTaskId = XT.iPageId        
 End      
      
 Else      
 BEGIN      
  update T Set T.vPageName = XT.vPageName, T.vPageDescription = XT.vPageDescription,T.dtModifiedOn = getdate(),        
 T.uModifiedById = XT.uUserId,T.iMainClientId = XT.iMainClientId  from t_CMS_Page T,OPENXML(@h,'Data',1)  with (iPageId int './iPageId/@value',vPageName NVARCHAR(2000) './vPageName/@value',vPageDescription NVARCHAR(4000) './vPageDescription/@value',iFolderId int './iFolderId/@value',      
 dtCreatedOn datetime './dtCreatedOn/@value', dtModifiedOn datetime './dtModifiedOn/@value',iMainClientId int './iMainClientId/@value',uUserId uniqueidentifier './uUserId/@value') XT        
 where T.iShortcutToTaskId = XT.iPageId        
 END      
      
 update TP set TP.cIsCalibratedActive = XTP.cIsCalibratedActive,      
 TP.cIsCalibrationComplete = XTP.cIsCalibrationComplete,TP.cIsSeparated = XTP.cIsSeparated,TP.iInputStatusId = XTP.iInputStatusId,TP.dTaskDifficulty = XTP.dTaskDifficulty,      
 TP.cDifficultyHasBeenInputManually = XTP.cDifficultyHasBeenInputManually,        
 TP.iTaskWorkflowStatusId = XTP.iTaskWorkflowStatusId,TP.iTaskTypeId = XTP.iTaskTypeId,TP.uSkinId = XTP.uSkinId,TP.cIsSuitableForOnline = XTP.cIsSuitableForOnline,      
 TP.cIsSuitableForPaperPencil = XTP.cIsSuitableForPaperPencil,TP.cIsPaperPencil = XTP.cIsPaperPencil ,TP.vCustomerTaskId = XTP.vCustomerTaskId ,TP.iTaskUsageId = XTP.iTaskUsageId,      
 TP.iEstimatedTimeToSolveSolveInSeconds = XTP.iEstimatedTimeToSolveSolveInSeconds,TP.vSource = XTP.vSource,TP.iTaskReviewStatusId = XTP.iTaskReviewStatusId,      
 TP.cIsForInternalTesting = XTP.cIsForInternalTesting,TP.cIsDataStoragePlaceholder=XTP.cIsDataStoragePlaceholder,TP.cIsCreatedByTeacher=XTP.cIsCreatedByTeacher,TP.      
 cIsAdaptiveTask = XTP.cIsAdaptiveTask      
 from t_CMS_PageProperty_TestDrive TP,OpenXml(@h,'Data',1)        
 with (iPageId int './iPageId/@value',iSubjectId int './iSubjectId/@value',iCategoryId int './iCategoryId/@value',      
 cIsCalibratedActive char(1) './cIsCalibratedActive/@value',cIsCalibrationComplete char(1) './cIsCalibrationComplete/@value',cIsSeparated char(1) './cIsSeparated/@value',      
 iInputStatusId int './iInputStatusId/@value',dTaskDifficulty decimal(12,8) './dTaskDifficulty/@value',cDifficultyHasBeenInputManually char(1) './cDifficultyHasBeenInputManually/@value',      
 iTaskWorkflowStatusId int './iTaskWorkflowStatusId/@value',   iTaskTypeId int './iTaskTypeId/@value',uSkinId uniqueidentifier './uSkinId/@value',cIsSuitableForOnline char(1) './cIsSuitableForOnline/@value',      
 cIsSuitableForPaperPencil char(1) './cIsSuitableForPaperPencil/@value',cIsPaperPencil char(1) './cIsPaperPencil/@value',vCustomerTaskId nvarchar(200) './vCustomerTaskId/@value',      
 iTaskUsageId int './iTaskUsageId/@value',iEstimatedTimeToSolveSolveInSeconds int './iEstimatedTimeToSolveSolveInSeconds/@value',vSource nvarchar(500) './vSource/@value',      
 iTaskReviewStatusId int './iTaskReviewStatusId/@value',cIsForInternalTesting char(1) './cIsForInternalTesting/@value',      
 cIsDataStoragePlaceholder char(1) './cIsDataStoragePlaceholder/@value', cIsCreatedByTeacher char(1) './cIsCreatedByTeacher/@value',iCategoryCompetencyId int './iCategoryCompetencyId/@value',cIsAdaptiveTask char(1) './cIsAdaptiveTask/@value',iCategoryCompetencyLevelId int './iCategoryCompetencyLevelId/@value',iCategoryCompetencyRangeId int './iCategoryCompetencyRangeId/@value') XTP        
   where TP.iPageId in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
      
   /************ Adding Languages For linked tasks**************/        
      
 delete from t_CMS_Page_Language where iPageID in(select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId)      
 declare @iNewPageId int      
 Declare Cur_1 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_1      
 fetch next from Cur_1 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
  insert into t_CMS_Page_Language select @iNewPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')       
 fetch next from Cur_1 into @iNewPageId      
 end      
  close Cur_1      
  deallocate Cur_1      
          
/************ End Adding Languages For linked Task**************/        
      
      
/**********************For Task keyword linked tasks***********/        
        
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
 Declare Cur_2 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_2      
 fetch next from Cur_2 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
  insert into t_Testdrive_Task_AssignedTaskKeyword select @iNewPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')        
 fetch next from Cur_2 into @iNewPageId      
 end      
  close Cur_2      
  deallocate Cur_2      
           
/**********************End ask keyword linked tasks***********/       
      
/**********************For Assigned Additional Property linked tasks***********/        
        
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
 Declare Cur_A cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_A      
 fetch next from Cur_A into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
  insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iNewPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')        
 fetch next from Cur_A into @iNewPageId      
 end      
  close Cur_A      
  deallocate Cur_A      
           
/**********************End ask keyword linked tasks***********/       
      
/**********************For Task DifficultyLevel for linked tasks***********/        
        
 delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId in (select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N')      
 Declare Cur_3 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_3      
 fetch next from Cur_3 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
   insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iNewPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',TaskDifficultyLevelId int '@TaskDifficultyLevelId')        
 fetch next from Cur_3 into @iNewPageId      
 end      
  close Cur_3      
  deallocate Cur_3      
        
/**********************End Task DifficultyLevel for linked tasks***********/       
      
/**********************For ReviewStatus for linked tasks***********/        
        
   Declare Cur_4 cursor for select iPageId from t_CMS_Page where iShortcutToTaskId=@iPageId and cIsDeleted ='N'      
 open Cur_4      
 fetch next from Cur_4 into @iNewPageId      
 while(@@FETCH_STATUS<>-1)      
 begin      
        
   declare @iStatusLanguageId1 int,@tChangeRequest1 nvarchar(max),@uReviewStatus1 uniqueidentifier,@vTitle1 nvarchar(max),@iPageDataId1 int      
    Declare Cur_PageDataStatus1 cursor      
              
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')       
 open Cur_PageDataStatus1      
 Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1      
 while(@@FETCH_STATUS<>-1)      
 begin      
      
 if exists(select * from  t_CMS_Page_Data where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1)      
 begin      
  print @iStatusLanguageId1      
 update t_CMS_Page_Data set vPageTitle = @vTitle1 where iPageID = @iNewPageId and iLanguageID= @iStatusLanguageId1      
 select @iPageDataId1 = ipageDataId from t_CMS_Page_Data where iPageID =@iNewPageId and iLanguageID= @iStatusLanguageId1      
 if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus1 and uUserId =@uUserId and cIsLatest='Y' and iPageDataId=@iPageDataId1)      
 BEGIN      
     if(@uReviewStatus1 is not null)      
   BEGIN      
         
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId1      
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
  values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')      
      END      
  END      
 end      
 else      
 begin      
   insert into t_CMS_Page_Data values(@iNewPageId,@iStatusLanguageId1,@vTitle1,null,NULL,NULL,'N',null)      
  set @iPageDataId1=@@IDENTITY      
   if(@uReviewStatus1 is not null)      
   BEGIN      
       insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
    values(newid(),@iPageDataId1,@uReviewStatus1,@tChangeRequest1,@uUserId,GETDATE(),'Y')      
      END      
 end      
  Fetch next from Cur_PageDataStatus1 into @iStatusLanguageId1,@uReviewStatus1,@tChangeRequest1,@vTitle1      
  end      
  close Cur_PageDataStatus1      
  deallocate Cur_PageDataStatus1      
       
 fetch next from Cur_4 into @iNewPageId      
 end      
  close Cur_4      
  deallocate Cur_4      
      
/**********************End ReviewStatus for linked tasks***********/       
      
      
      
  END      
           
  END        
          
  /**** Basic Properties End ****/        
          
/************ Adding Languages For Task**************/        
 delete from t_CMS_Page_Language where iPageID=@iPageId        
 insert into t_CMS_Page_Language select @iPageId, Id from openxml(@h,'Data/Languages/Id') with (Id int '.')        
        
/************ End Adding Languages For Task**************/        
        
      
/**********************For ReviewStatus***********/        
   declare @iStatusLanguageId int,@tChangeRequest nvarchar(max),@uReviewStatus uniqueidentifier,@vTitle nvarchar(max),@iPageDataId int      
    Declare Cur_PageDataStatus cursor      
              
 For Select * from openxml(@h,'Data/Status/Language') with (Id int '@Id',ReviewStatus uniqueidentifier '@ReviewStatus',ChangeRequest nvarchar(max) '@ChangeRequest',Title nvarchar(max) '@Title')       
 open Cur_PageDataStatus      
 Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle      
 while(@@FETCH_STATUS<>-1)      
 begin      
 print @tChangeRequest      
 if exists(select * from  t_CMS_Page_Data where iPageID = @iPageId and iLanguageID= @iStatusLanguageId)      
 begin      
  print @iStatusLanguageId      
      
 update t_CMS_Page_Data set vPageTitle = @vTitle where iPageID = @iPageId and iLanguageID= @iStatusLanguageId      
  select @iPageDataId = ipageDataId from t_CMS_Page_Data where iPageID =@iPageId and iLanguageID= @iStatusLanguageId      
  if not exists(select * from t_Cms_Page_AssignedWorkflowStatus where uWorkflowStatusId =@uReviewStatus and iPageDataId=@iPageDataId and uUserId =@uUserId and cIsLatest='Y')      
 BEGIN      
  If(@uReviewStatus is not null)      
   BEGIN      
     update t_Cms_Page_AssignedWorkflowStatus set cIsLatest='N' where iPageDataId=@iPageDataId      
     insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
   values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')      
      END      
  END      
 end      
 else      
 begin      
   insert into t_CMS_Page_Data values(@iPageId,@iStatusLanguageId,@vTitle,null,NULL,NULL,'N',null)      
  set @iPageDataId=@@IDENTITY      
   If(@uReviewStatus is not null)      
   BEGIN      
         insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)    
   values(newid(),@iPageDataId,@uReviewStatus,@tChangeRequest,@uUserId,GETDATE(),'Y')     
       END      
 end      
  Fetch next from Cur_PageDataStatus into @iStatusLanguageId,@uReviewStatus,@tChangeRequest,@vTitle      
  end      
  close Cur_PageDataStatus      
  deallocate Cur_PageDataStatus      
       
      
/**********************ReviewStatus End***********/       
      
      
/**********************For Task keyword***********/        
        
 delete from t_Testdrive_Task_AssignedTaskKeyword where iPageId=@iPageId        
 insert into t_Testdrive_Task_AssignedTaskKeyword select @iPageId,Id from openxml(@h,'Data/Keyword/Id',1) with (Id int '.')        
        
/**********************Data Task keyword***********/       
      
/**********************For Task Additional Property***********/        
        
 delete from t_TestDrive_Task_AssignedAdditionalTaskProperty where iPageId=@iPageId        
 insert into t_TestDrive_Task_AssignedAdditionalTaskProperty select @iPageId,Id,Val from openxml(@h,'Data/Property/Meta',1) with (Id int '@Id',Val int '@Val')        
        
/**********************For Task Additional Property***********/       
      
/**********************For Task DifficultyLevel***********/        
        
  delete from t_Testdrive_Task_AssignedTaskDifficultyLevel where iPageId=@iPageId        
  insert into t_Testdrive_Task_AssignedTaskDifficultyLevel select @iPageId,SchoolYearId,TaskDifficultyLevelId from openxml(@h,'Data/Difficulty/Level',1) with (SchoolYearId int '@SchoolYearId',      
  TaskDifficultyLevelId int '@TaskDifficultyLevelId')        
        
/**********************Data Task DifficultyLevel***********/       
      
 SELECT  P.*,                        
 PD.*,                        
 PP.*,                        
 PIS.* ,      
 AW.uWorkflowStatusId,AW.cIsLatest                    
 FROM    t_CMS_Page P                        
 LEFT OUTER JOIN t_CMS_Page_Data PD ON P.iPageId = PD.iPageId      
 LEFT OUTER JOIN t_CMS_PageProperty_TestDrive PP ON P.iPageId = PP.iPageId      
 LEFT OUTER JOIN t_Cms_Page_AssignedWorkflowStatus AW on AW.iPageDataId = PD.iPageDataID and AW.cIsLatest='Y'      
 LEFT OUTER JOIN t_TestDrive_InputStatus PIS ON PP.iInputStatusId = PIS.iInputStatusId                     
 WHERE   P.iPageId = @iPageId                        
 Select * from t_CMS_Page_Language where iPageId = @iPageId        
 select * from t_Testdrive_Task_AssignedTaskKeyword where iPageId=  @iPageId       
 select * from t_Testdrive_Task_AssignedTaskDifficultyLevel P      
 inner join t_TestDrive_Task_TaskDifficultyLevel L on P.iTaskDifficultyLevelId = L.iTaskDifficultyLevelId      
 inner join t_TestDrive_Task_TaskDifficultyLevel_Data LD on L.iTaskDifficultyLevelId = LD.iTaskDifficultyLevelId      
  where iPageId=  @iPageId       
 select * from  t_CMS_Page_Container where iPageId=  @iPageId        
 select * from t_CMS_Page where iShortCutToTaskId = @iPageId      
 commit      
      
GO



ALTER proc [dbo].[Proc_TestDrive_ConditionalFlow_AddEditCustomSequence]     
    
(      
    
 @uCustomSequenceId UNIQUEIDENTIFIER,    
 @uTestId UNIQUEIDENTIFIER,    
 @uUserId UNIQUEIDENTIFIER,    
 @iLanguageId INT,    
 @vCustomSequenceName NVARCHAR(500),    
 @vDescription NVARCHAR(MAX),    
 @cIsDefault CHAR(1)    
    
)        
AS       
    
BEGIN     
    
/********************************************************************************************       
 Created By: Sricharan Kalavagunta       
 Created Date: 03.02.2014          
 Description:       
    
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included colum  list for Insertstatement  
********************************************************************************************/     
DECLARE @NewId UNIQUEIDENTIFIER      
IF(@uCustomSequenceId='00000000-0000-0000-0000-000000000000')       
 BEGIN    
  SET @NewId = NEWID()    
  INSERT INTO t_TestDrive_Test_CustomSequence(uCustomSequenceId, uTestId, cIsDefault, cIsDeleted, uUserId, dtCreatedOn, dtModifiedOn)    
  VALUES (@NewId,@uTestId,@cIsDefault,'N',@uUserId,GETDATE(),GETDATE())    
  INSERT INTO t_TestDrive_Test_CustomSequence_Data  (uCustomSequenceDataId,uCustomSequenceId,iLanguageId,vName,vDescription)  
  VALUES (NEWID(),@NewId,@iLanguageId,@vCustomSequenceName,@vDescription)    
      
  SELECT @NewId AS uCustomSequenceId, @vCustomSequenceName AS vName    
 END     
ELSE    
 BEGIN    
  UPDATE t_TestDrive_Test_CustomSequence_Data    
  SET vName = @vCustomSequenceName, vDescription = @vDescription     
  WHERE uCustomSequenceId = @uCustomSequenceId    
      
  UPDATE t_TestDrive_Test_CustomSequence    
  SET dtModifiedOn = GETDATE(), cIsDefault = @cIsDefault    
  WHERE uCustomSequenceId = @uCustomSequenceId    
    
  SELECT @uCustomSequenceId AS uCustomSequenceId, @vCustomSequenceName AS vName    
 END    
END

GO

    
    
ALTER proc [dbo].[Proc_TestDrive_ConditionalFlow_AddEditCustomSequenceConditionData]     
(      
 @uCustomSequenceId UNIQUEIDENTIFIER,    
 @uUserId UNIQUEIDENTIFIER,    
 @iLanguageId INT,    
 @xmlCustomSequence XML    
)        
AS       
BEGIN     
/********************************************************************************************       
 Created By: Sricharan Kalavagunta                     
 Created Date: 20.09.2013                        
 Description:     
       
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert statements   
********************************************************************************************/     
IF(@uCustomSequenceId = '00000000-0000-0000-0000-000000000000')        
BEGIN       
SET @uCustomSequenceId = NEWID()    
INSERT INTO t_TestDrive_Test_CustomSequence(uCustomSequenceId, uTestId, cIsDefault, cIsDeleted, uUserId, dtCreatedOn, dtModifiedOn, uModifiedByUserId)    
  VALUES (@uCustomSequenceId,(SELECT T.C.value('@TestId','UNIQUEIDENTIFIER') FROM @xmlCustomSequence.nodes('CustomSequenceData') T(C)) ,'Y','N',@uUserId,GETDATE(),GETDATE(),@uUserId)    
    INSERT INTO t_TestDrive_Test_CustomSequence_Data  (uCustomSequenceDataId,uCustomSequenceId,iLanguageId,vName,vDescription)    
  VALUES (NEWID(),@uCustomSequenceId,@iLanguageId,'Default','Default Custom Sequence')    
END    
DECLARE @CustomSequenceConditionId UNIQUEIDENTIFIER    
SET @CustomSequenceConditionId = (SELECT T.C.value('@CustomSequenceConditionId', 'UNIQUEIDENTIFIER') AS uCustomSequenceConditionId FROM @xmlCustomSequence.nodes('CustomSequenceData') T(C))    
IF(@CustomSequenceConditionId != '00000000-0000-0000-0000-000000000000')        
BEGIN       
DELETE FROM t_Testdrive_Test_CustomSequence_Condition_Data WHERE uCustomSequenceConditionId = @CustomSequenceConditionId    
DELETE FROM t_Testdrive_Test_CustomSequence_Condition WHERE uCustomSequenceConditionId = @CustomSequenceConditionId    
END    
ELSE    
BEGIN    
SET @CustomSequenceConditionId = NEWID()    
END    
INSERT INTO t_Testdrive_Test_CustomSequence_Condition (uCustomSequenceConditionId,uTestId,iTaskId,vConditionType,iReturnTaskId,vConditionScript,uCustomSequenceId)    
SELECT     
  @CustomSequenceConditionId AS 'uCustomSequenceConditionId',    
  T.C.value('@TestId','UNIQUEIDENTIFIER') AS 'uTestId',    
  T.C.value('@TaskId','int') AS 'iTaskId',    
  T.C.value('@ConditionType','NVARCHAR(100)') AS 'vConditionType',    
  T.C.value('@ReturnTaskId','int') AS 'iReturnTaskId',    
  T.C.value('@ConditionScript','NVARCHAR(MAX)') AS 'vConditionScript',    
  @uCustomSequenceId AS 'uCustomSequenceId'    
FROM @xmlCustomSequence.nodes('CustomSequenceData') T(C)    
INSERT INTO t_Testdrive_Test_CustomSequence_Condition_Data(uCustomSequenceConditionDataId,uCustomSequenceConditionId,vConditionAttribute,vConditionAttributeOperator,iConditionAttributeType,vConditionAttributeValue,cIsResultTaskCondition)    
SELECT     
  NEWID() AS 'uCustomSequenceConditionDataId',    
  @CustomSequenceConditionId AS 'uCustomSequenceConditionId',    
  [Table].[Column].value('@ConditionAttribute', 'NVARCHAR(100)') AS vConditionAttribute,    
  REPLACE(REPLACE(REPLACE(REPLACE([Table].[Column].value('@ConditionAttributeOperator','NVARCHAR(5)'),'{gt}','>'),'{lt}','<'),'{le}','>='),'{ge}','>=') AS vConditionAttributeOperator,    
  --[Table].[Column].value('@ConditionAttributeOperator','NVARCHAR(5)') AS vConditionAttributeOperator,    
  [Table].[Column].value('@ConditionAttributeType','INT') AS iConditionAttributeType,    
  [Table].[Column].value('@ConditionAttributeValue','NVARCHAR(500)') AS vConditionAttributeValue,    
  [Table].[Column].value('@ResultTaskCondition','CHAR(1)') AS cIsResultTaskCondition    
FROM @xmlCustomSequence.nodes('CustomSequenceData/Conditions/Condition') [Table]([Column])    
SELECT * FROM t_Testdrive_Test_CustomSequence_Condition C     
LEFT JOIN t_Testdrive_Test_CustomSequence_Data CSD    
ON C.uCustomSequenceId = CSD.uCustomSequenceId    
WHERE uCustomSequenceConditionId = @CustomSequenceConditionId    
SELECT * FROM t_Testdrive_Test_CustomSequence_Condition_Data where uCustomSequenceConditionId = @CustomSequenceConditionId    
END

GO

  
ALTER proc [dbo].[Proc_TestDrive_RScripts_AddEditRScriptDataExecution]     
(    
 @uDataExecutionId UNIQUEIDENTIFIER,  
    @iMainClientId INT,   
 @uUserId UNIQUEIDENTIFIER,     
    @vDataExecutionName NVARCHAR(200),    
 @iParentFolderId INT,        
    @vDescription NVARCHAR(max)    
)      
AS     
BEGIN   
/********************************************************************************************                      
 Created By: Sricharan Kalavagunta                   
 Created Date: 20.09.2013                      
 Description: Adds RScript Elements for respective FolderId     
                    
 Modified By: Arvind K                                       
 Modified Date: 11/08/2020                                     
 Description: Included uModifiedByUserId column    
  
********************************************************************************************/   
DECLARE @NewId UNIQUEIDENTIFIER         
IF(@uDataExecutionId='00000000-0000-0000-0000-000000000000')            
 BEGIN  
  SET @NewId = NEWID()  
  INSERT INTO t_TestDrive_RDataExecution(uDataExecutionId, iDataExecutionFolderId, vDataExecutionName, vDescription, dtCreatedOn, dtModifiedOn, uUserId, cIsDeleted, iMainClientId, vDataExecution, uRScriptBatchId, uModifiedByUserId)  
  VALUES (@NewId,@iParentFolderId,@vDataExecutionName,@vDescription,GETDATE(),GETDATE(),@uUserId,'N',@iMainClientId,'',null,@uUserId )  
  SELECT *  
  FROM t_TestDrive_RDataExecution  
  WHERE uDataExecutionId = @NewId  
 END   
ELSE  
 BEGIN  
  UPDATE t_TestDrive_RDataExecution  SET  
   vDataExecutionName =@vDataExecutionName,  
   vDescription = @vDescription,  
   iDataExecutionFolderId = @iParentFolderId,  
   uUserId=@uUserId,  
   iMainCLientId = @iMainClientId,  
   dtModifiedOn=GETDATE()  
  WHERE uDataExecutionId =@uDataExecutionId  
  SELECT *  
  FROM t_TestDrive_RDataExecution  
  WHERE uDataExecutionId =@uDataExecutionId  
 END  
END  
  
GO     
    
ALTER proc [dbo].[Proc_TestDrive_RScripts_AddEditRScriptDataExecutionFolder]                              
(                                
    @iMainClientId int,          
    @iDataExecutionFolderId int,                        
    @iParentFolderId int,                      
    @vDataExecutionFolderName nvarchar(200),                      
    @vDescription ntext,           
    @uUserId uniqueidentifier               
)                                
As                                
BEGIN                                
/********************************************************************************************                 
  Created By: Sricharan Kalavagunta            
  Created Date: 24.09.2013            
  Description: This Procedure adds RScript folders            
    
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list  
      
********************************************************************************************/                             
IF(@iDataExecutionFolderId=-1)                
BEGIN            
                         
DECLARE @iNewFolderId int                       
INSERT INTO t_TestDrive_RDataExecution_Folder(iParentFolderId, vDataExecutionFolderName, vDescription, dtCreatedOn, dtModifiedOn, uUserId, cIsDeleted, iMainClientId)    
 VALUES (@iParentFolderId,@vDataExecutionFolderName,@vDescription,GETDATE(),GETDATE(),@uUserId,'N',@iMainClientId)                      
SET @iNewFolderId =@@IDENTITY              
PRINT @iNewFolderId                
SELECT * FROM t_TestDrive_RDataExecution_Folder        
 WHERE iDataExecutionFolderId =@iNewFolderId                      
END                
ELSE                
BEGIN                
        
UPDATE t_TestDrive_RDataExecution_Folder SET            
dtModifiedOn=GETDATE(),           
vDataExecutionFolderName = @vDataExecutionFolderName,                
vDescription =@vDescription            
        
WHERE iDataExecutionFolderId =@iDataExecutionFolderId              
SELECT * FROM t_TestDrive_RDataExecution_Folder WHERE iDataExecutionFolderId =@iDataExecutionFolderId                   
END                
END    
    
GO

    
ALTER proc [dbo].[Proc_TestDrive_RScripts_AddEditRScript]     
(      
 @uRScriptId UNIQUEIDENTIFIER,    
    @iMainClientId INT,     
 @uUserId UNIQUEIDENTIFIER,       
    @vRScriptName NVARCHAR(200),      
 @iParentFolderId INT,          
    @vDescription NVARCHAR(max)      
)        
AS       
BEGIN     
/********************************************************************************************                        
 Created By: Sricharan Kalavagunta                     
 Created Date: 20.09.2013                        
 Description: Adds RScript Elements for respective FolderId       
                      
 Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert statements   
    
********************************************************************************************/     
DECLARE @NewId UNIQUEIDENTIFIER           
IF(@uRScriptId='00000000-0000-0000-0000-000000000000')              
 BEGIN    
  SET @NewId = NEWID()    
  INSERT INTO t_TestDrive_RScript(uRScriptId, iRScriptFolderId, vScriptName, vDescription, dtCreatedOn, dtModifiedOn, uUserId, cIsDeleted, iMainClientId, vRScript)    
  VALUES (@NewId,@iParentFolderId,@vRScriptName,@vDescription,GETDATE(),GETDATE(),@uUserId,'N',@iMainClientId,'')    
  SELECT *    
  FROM t_TestDrive_RScript    
  WHERE uRScriptId = @NewId    
 END     
ELSE    
 BEGIN    
  UPDATE t_TestDrive_RScript  SET    
   vScriptName =@vRScriptName,    
   vDescription = @vDescription,    
   iRScriptFolderId = @iParentFolderId,    
   uUserId=@uUserId,    
   iMainCLientId = @iMainClientId,    
   dtModifiedOn=GETDATE()    
  WHERE uRScriptId =@uRScriptId    
  SELECT *    
  FROM t_TestDrive_RScript    
  WHERE uRScriptId =@uRScriptId    
 END    
END    

GO

    
    
ALTER proc [Proc_CMS_CMSPAGE_AddEditPageFolderProperties]              
(              
    @iMainClientId int,     
    @iFolderId int,     
    @iParentFolderId int,    
    @vFolderName nvarchar(200),    
    @vFolderDescription ntext,     
    @vLanguageXml ntext,               
    @uUserId uniqueidentifier,        
    @cIsForInternalTesting char(1),    
 @vTitleXml ntext ,    
 @uSkinId  uniqueidentifier,    
 @cIsCreatedByTeacher char(1)    
    
)              
As              
Begin Transaction        
/********************************************************************************************    
  Created By: Arvind Sharma    
  Created Date: 27.09.2011    
    
   Modified By: Arvind K                                         
 Modified Date: 11/08/2020                                       
 Description: Included column list for Insert statements   
********************************************************************************************/           
    
 Declare @iPageFolderId int    
 if(@iFolderId=-1)           
  BEGIN       
   Declare @iNewFolderId int     
   Insert into t_CMS_FileSystem_PageFolder(iPageParentFolderID, iMainClientId, dtCreatedOn, dtModifiedOn, cIsDeleted, vPageFolderName, vPageFolderDescription, uUserId, cIsForInternalTesting, uSkinId, cIsCreatedByTeacher)    
    values(@iParentFolderId,@iMainClientId,GETDATE(),GETDATE(),'N',@vFolderName,@vFolderDescription,@uUserId,@cIsForInternalTesting,@uSkinId,@cIsCreatedByTeacher)    
   set @iNewFolderId =@@IDENTITY         
   set @iPageFolderId = @iNewFolderId              
   select * from t_CMS_FileSystem_PageFolder where iPageFolderID =@iNewFolderId    
  END           
 ELSE           
  BEGIN           
   WITH PageFolderLevels (iPageFolderId)          
   AS          
     (          
     -- Parent member definition          
   SELECT iPageFolderId          
   FROM t_CMS_FileSystem_PageFolder           
   WHERE iPageFolderId = @iFolderId          
   UNION ALL          
     -- Recursive member definition          
   SELECT P.iPageFolderId          
   FROM t_CMS_FileSystem_PageFolder P          
   INNER JOIN PageFolderLevels AS F          
   ON P.iPageParentFolderId = F.iPageFolderId              
     )        
           
   -- Statement that executes the CTE and inserts the value into the Temp Table        
            SELECT iPageFolderId into #tbl_PageFolders FROM PageFolderLevels  OPTION (MAXRECURSION 0)        
       
   --- updates the Folders in All the Levels for cIsForInternaltesting attributes.          
   if exists(select * from t_CMS_FileSystem_PageFolder P where iPageParentFolderID in(select iPageFolderId from #tbl_PageFolders))    
   BEGIN    
            Update PF SET PF.cIsForInternalTesting=@cIsForInternalTesting           
   FROM #tbl_PageFolders FL,t_CMS_FileSystem_PageFolder PF          
   where FL.iPageFolderId = PF.iPageFolderId             
   END    
   --- updates the tasks in All the Levels for cIsForInternaltesting attributes.      
   if exists(select * from t_CMS_Page P where iFolderId in(select iPageFolderId from #tbl_PageFolders))    
   BEGIN        
    Update TP SET TP.cIsForInternalTesting=@cIsForInternalTesting          
    FROM #tbl_PageFolders F,t_CMS_PageProperty_TestDrive TP          
    inner join t_CMS_Page P on P.iPageId =TP.iPageId      
    where F.iPageFolderId = P.iFolderId       
   END       
            --- Drop the Temp Table          
            Drop Table #tbl_PageFolders               
    
   UPDATE t_CMS_FileSystem_PageFolder     
   SET dtModifiedOn=GETDATE(),vPageFolderName = @vFolderName,vPageFolderDescription =@vFolderDescription ,cIsForInternalTesting =@cIsForInternalTesting, uSkinId =@uSkinId,uModifiedById=@uUserId     
   where iPageFolderID =@iFolderId    
    
   set @iPageFolderId = @iFolderId    
   select * from t_CMS_FileSystem_PageFolder where iPageFolderId =@iFolderId              
  END    
    
  --Adding in language table              
  DELETE FROM t_CMS_FileSystem_PageFolder_Langauge WHERE iPageFolderId = @iPageFolderId        
  DECLARE @XmlDoc INT,       
  @iLanguageId INT,    
  @vPageFolderTitle nvarchar(500)       
      
  EXEC sp_xml_preparedocument @XmlDoc OUTPUT, @vLanguageXml        
  DECLARE  Cur_Page CURSOR FOR       
  SELECT  iLanguageId  FROM    OPENXML(@XmlDoc, 'Language/Id',1) WITH (iLanguageId INT '.' )         
  OPEN  Cur_Page        
  FETCH NEXT from Cur_Page into @iLanguageId       
   WHILE( @@FETCH_STATUS <> -1 )        
    BEGIN       
     INSERT INTO t_CMS_FileSystem_PageFolder_Langauge values(@iPageFolderId,@iLanguageId)       
     FETCH NEXT FROM Cur_Page INTO @iLanguageId       
    END       
   CLOSE Cur_Page       
   DEALLOCATE Cur_Page               
      
  EXEC sp_xml_preparedocument @XmlDoc OUTPUT, @vTitleXml        
  DECLARE  Cur_Title CURSOR FOR       
  SELECT  iLanguageId,vFolderTitle  FROM    OPENXML(@XmlDoc, 'Title/Language') WITH (iLanguageId INT '@Id',vFolderTitle nvarchar(500) '@FolderTitle' )         
  OPEN  Cur_Title        
  FETCH NEXT from Cur_Title into @iLanguageId,@vPageFolderTitle       
  WHILE( @@FETCH_STATUS <> -1 )        
   BEGIN       
    if exists(select * from t_CMS_FileSystem_PageFolder_data where iPageFolderId =@iPageFolderId and ilanguageId = @iLanguageId)    
     begin    
      update t_CMS_FileSystem_PageFolder_data set vPageFolderTitle =@vPageFolderTitle where iPageFolderId =@iPageFolderId and ilanguageId = @iLanguageId              
     end    
    else    
     begin    
      INSERT INTO t_CMS_FileSystem_PageFolder_data values(@iPageFolderId,@iLanguageId,@vPageFolderTitle)     
     end    
   FETCH NEXT FROM Cur_Title INTO @iLanguageId ,@vPageFolderTitle      
   END       
  CLOSE Cur_Title      
  DEALLOCATE Cur_Title          
Commit     
    
GO

ALTER procEDURE [dbo].[Proc_CMS_CMSPage_CopyPasteTask]                                                                     
(                                                                          
 @iPageId INT,                                                                          
 @iDestinationFolderId INT,                                                                          
 @vResourceText NVARCHAR(50),              
 @vCopyName NVARCHAR(Max),      
 @cIsShortCut char(1),      
 @uNewUserId uniqueidentifier                                                                      
)                                                                          
AS                                                                           
 BEGIN transaction                                                                                                                                         
/********************************************************************************************                                                                          
                                                                            
  Created By: Suman Goutham                                                                          
  Created Date: 12.03.2008                                                                          
  Description: Pastes the copied Task                                                                          
      
 Modified By: Arvind K                                           
 Modified Date: 11/08/2020                                         
 Description: Included column list for Insert statements   
                                                                          
********************************************************************************************/                                                                                                                                        
DECLARE @iNewTaskId INT                                                                
       print @vCopyName                                                                       
if(@vCopyName = '')              
begin                
DECLARE @vPageName nvarchar(MAX)                                                              
SELECT @vPageName = [vPageName] FROM  [t_CMS_Page]  where cIsDeleted = 'N' and  [iPageId] = @iPageId               
DECLARE @cExists int                                                              
SET @cExists = 1                                                              
DECLARE @iCount int                                                              
SET @iCount =0                                                           
DECLARE @vTempString nvarchar(50)                                                              
WHILE(@cExists > -1)                                                              
BEGIN                                                              
SET @vCopyName = @vResourceText + ' ' + @vPageName                                                              
IF(@iCount > 0)                                                              
BEGIN                                                              
SET @vTempString = '(' + Convert(nvarchar(max),@iCount) + ')'                                                              
SET @vCopyName = @vCopyName + @vTempString                                                              
END                                                              
IF EXISTS(SELECT * FROM [t_CMS_Page]                                                               
WHERE vPageName = @vCopyname and iFolderId = @iDestinationFolderId and cIsDeleted = 'N' )                                                        
BEGIN                                                              
SET @iCount = @iCount + 1                                                              
END                                             
ELSE               
BEGIN                                                  
SET @cExists = -1         
END                      
END              
END            
 print @vCopyName          
if(@iDestinationFolderId = 0)                                           
BEGIN              
SELECT @iDestinationFolderId = iFolderId FROM  [t_CMS_Page]  where cIsDeleted = 'N' and  [iPageId] = @iPageId               
END              
 if(@cIsShortCut='Y')      
 BEGIN             
INSERT  [t_CMS_Page]                                                   
  (                                                      
  [iPageTemplateId],                                                                
  [iMainClientId],                            
  [iFolderId],                                                                          
  [dtCreatedOn],                                                      
  [dtModifiedOn],                                  
  [cIsDeleted],                                                                          
  [cIsSecure],                                    
  [uUserId],                                  
  [vPageName],                                  
  [vPageDescription] ,                            
  [uPageGuid]  ,      
  [uModifiedById],      
  cIsShortcut,      
  iShortcutToTaskId                               
  )                                                 
SELECT  [iPageTemplateId],                                                                          
  [iMainClientId],                                           
  @iDestinationFolderId,                                                                          
  GETDATE(),                                                                       
  GETDATE(),                                                                          
  [cIsDeleted],                                                                          
  [cIsSecure],                                                                          
  [uUserId],                                  
  @vCopyName,                                  
  [vPageDescription],newid(),uUserId,@cIsShortCut,@iPageId                                                                          
FROM    [t_CMS_Page]                                                                          
WHERE   [iPageId] = @iPageId                                                                           
     END      
  ELSE      
  BEGIN      
  print @vCopyName      
  INSERT  [t_CMS_Page]                                                   
    (                                                      
    [iPageTemplateId],                                                                
    [iMainClientId],                            
    [iFolderId],                                                                          
    [dtCreatedOn],                                                      
    [dtModifiedOn],                                  
    [cIsDeleted],                                                                          
    [cIsSecure],                                    
    [uUserId],                                  
    [vPageName],                                  
    [vPageDescription] ,                            
    [uPageGuid]  ,      
    [uModifiedById]                            
    )                                                 
  SELECT  [iPageTemplateId],                                                                          
    [iMainClientId],                                           
    @iDestinationFolderId,                                                                          
    GETDATE(),                                                                       
    GETDATE(),                                                                          
    [cIsDeleted],                                                                          
    [cIsSecure],                                                                          
    @uNewUserId,                                  
    @vCopyName,                                  
    [vPageDescription],newid(),@uNewUserId                                         
FROM    [t_CMS_Page]                                                                          
WHERE   [iPageId] = @iPageId      
  END      
                                         
SET @iNewTaskId = @@IDENTITY        
print @iNewTaskId      
                  
 INSERT  INTO [t_CMS_Page_Data]                                                      
 (                                                      
  [iPageID],                                                
  [iLanguageId],                                                                          
  [vPageTitle],                            
  [tCorrectAnswerExplanation],iTaskReviewStatusId,tChangeRequest,cPointOverride                                                     
 )                                                                          
SELECT  @iNewTaskId,                                                                          
  [iLanguageId],                                                                       
  [vPageTitle],[tCorrectAnswerExplanation] ,iTaskReviewStatusId,tChangeRequest,cPointOverride                                                                        
 FROM   [t_CMS_Page_Data]                                                                          
 WHERE   [iPageId] = @iPageId                                        
                                                                     
 DECLARE @iNewTaskWorkFlowStatus int                                        
 Declare @iMainClientId int                                        
 select @iMainClientId = iMainClientid from t_CMS_Page where iPageId = @iPageId                                        
 if exists(select * from t_TestDrive_Task_WorkflowStatus where iMainClientId = @iMainClientId)                                        
 begin                                        
 Select top 1  @iNewTaskWorkFlowStatus = iTaskWorkFlowStatusId from t_TestDrive_Task_WorkflowStatus where iMainClientId = @iMainClientId                                        
 order by iTaskWOrkflowStatusId asc                                        
 end                                        
 else                                        
 begin                               
 Select top 1  @iNewTaskWorkFlowStatus = iTaskWorkFlowStatusId from t_TestDrive_Task_WorkflowStatus where iMainClientId = 0                          
 order by iTaskWOrkflowStatusId asc                                        
 end                                        
        INSERT  INTO [t_CMS_PageProperty_TestDrive]                                      
  (                                                      
   [iPageId],                                                                          
   [iSubjectId],                                                                          
   [iCategoryId],                                     
   [iDescriptorId],                                                                          
   [dTaskDifficulty],                                                                          
   [iInputStatusId],                   
   [iTaskTypeId],                                                                       
   [cIsCalibratedActive],                                                                          
   [cHasCalibrationStarted],                                           
   [dCalibratedDifficulty],                                                                          
   [cIsLockedForCalibration],                     
   [dtCalibrationDateTime],                                                                          
   [cIsCalibrationComplete],                                                  
                                              
                                     
   [cIsSeparated],                                              
   [dDiscrimination],                                         
   [iTaskWorkFlowStatusId],                            
   dtWhenInputStatusChanged,                            
   cDifficultyHasBeenInputManually,                            
   cIsSuitableForOnline,                            
   cIsSuitableForPaperPencil,                            
   cIsPaperPencil,                            
   vCustomerTaskId,                            
   iTaskUsageId,                            
   iEstimatedTimeToSolveSolveInSeconds,                      
   iTaskReviewStatusId,tChangeRequest ,cIsDataStoragePlaceholder,cIsForInternalTesting,      
  cShowRandomQuestions,iNumberOfQuestionsPerPage,cIsAdaptiveTask ,iCategoryCompetencyId,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId  ,vSource ,dPoints                                
  )                                                          
 SELECT  @iNewTaskId,                                                                          
   [iSubjectId],                                                                          
   [iCategoryId],                                                                          
   [iDescriptorId],                                                                          
   NULL,                                                                         
   1,                                                                         
   [iTaskTypeId],                                                                          
   'N',                                       
   'N',                                                                          
   [dCalibratedDifficulty],                                                                          
   'N',                                                                          
   NULL,                                                              
   'N',                                                    
                                             
   'N',                                              
   NULL,                                              
   @iNewTaskWorkFlowStatus,                            
   dtWhenInputStatusChanged,                            
   cDifficultyHasBeenInputManually,                            
   cIsSuitableForOnline,                            
   cIsSuitableForPaperPencil,                            
   cIsPaperPencil,                            
   vCustomerTaskId,                            
   iTaskUsageId,                            
   iEstimatedTimeToSolveSolveInSeconds ,iTaskReviewStatusId, tChangeRequest  ,cIsDataStoragePlaceholder,(select cIsForInternalTesting from t_CMS_FileSystem_PageFolder where iPageFolderID =  @iDestinationFolderId),       
    cShowRandomQuestions,iNumberOfQuestionsPerPage,cIsAdaptivetask,iCategoryCompetencyId,iCategoryCompetencyLevelId,iCategoryCompetencyRangeId ,vSource,dPoints      
  FROM    [t_CMS_PageProperty_TestDrive]                                                        
                WHERE   [iPageId] = @iPageId                                                                          
                                                       
   --Copy language Table          
   insert into t_CMS_Page_Language          
   select @iNewTaskId,iLanguageID from t_CMS_Page_Language  WHERE   [iPageId] = @iPageId                                                    
  --Copying the Calibration history                                                      
                                                      
    INSERT INTO t_TestDrive_Test_TaskCalibration                                                      
    (                                                      
   [iTaskId],                                                      
   [iTaskStatusId],                                                      
   [dCalibratedDifficulty],                                           
   [dtCreatedOn],                                                      
   [dNextDifficulty],                             
   [uPupilId],                                                      
   [uTestId],                                                      
   [uTestTokenId],                                                      
   [uClassId]                              
       )                                                        
  SELECT @iNewTaskId,                                         
   [iTaskStatusId],                                                      
   [dCalibratedDifficulty],                                                      
   [dtCreatedOn],                                                      
   [dNextDifficulty],                                                      
   [uPupilId],                                  
   [uTestId],                                                
   [uTestTokenId],                           
   [uClassId]                                    
  FROM t_TestDrive_Test_TaskCalibration where iTaskId = @iPageId                                                         
                                                      
--Copying Keyword data                            
INSERT INTO t_TestDrive_Task_AssignedTaskKeyword(iPageId,iTaskKeywordId)                            
SELECT @iNewTaskId,iTaskKeywordId from t_TestDrive_Task_AssignedTaskKeyword                            
WHERE iPageId = @iPageId                              
     --Copying School year difficulty                            
    INSERT INTO t_TestDrive_Task_AssignedTaskDifficultyLevel(iPageId,iSchoolYearId,iTaskDifficultyLevelId)                            
SELECT @iNewTaskId,iSchoolYearId,iTaskDifficultyLevelId from t_TestDrive_Task_AssignedTaskDifficultyLevel                            
WHERE iPageId = @iPageId        
      
--Copying Additional Task PropertyId                          
    INSERT INTO t_TestDrive_Task_AssignedAdditionalTaskProperty(iPageId,iAdditionalTaskPropertyId,iAdditionalTaskPropertyValueId)                            
SELECT @iNewTaskId,iAdditionalTaskPropertyId,iAdditionalTaskPropertyValueId from t_TestDrive_Task_AssignedAdditionalTaskProperty                            
WHERE iPageId = @iPageId        
      
--copy survey question      
declare @iPageQuestionId int,@iNewPageQuestionId int      
declare cur_lang cursor for select iPageQuestionId from t_Testdrive_Task_Question where iPageId =@iPageId      
open cur_lang       
--fetch next from cur_lang into @iPageQuestionId      
while @@FETCH_STATUS <>-1      
begin      
insert into t_Testdrive_Task_Question(iPageId,vQuestion,iSubjectId,dtCreatedOn,dtModifiedOn,cPolarity,iCategoryId,iDisplayOrder,iLanguageId)      
select @iNewTaskId,vQuestion,iSubjectId,GETDATE(),GETDATE(),cPolarity,iCategoryId,iDisplayOrder,iLanguageId from t_Testdrive_Task_Question      
where iPageQuestionId = @iPageQuestionId      
set @iNewPageQuestionId=@@IDENTITY      
insert into t_Testdrive_Task_Question_Data(iPageQuestionId,vQuestion,iLanguageId)      
select @iNewPageQuestionId,vQuestion,iLanguageId from t_Testdrive_Task_Question_Data      
where iPageQuestionId = @iPageQuestionId      
fetch next from cur_lang into @iPageQuestionId      
end      
close cur_lang      
deallocate cur_lang      
      
--copy assigned workflows      
      
declare @iLanguageId int,@iPageDataID int,@uWorkflowStatusId uniqueidentifier,@vCommnet nvarchar(max),@uUserId uniqueidentifier,@cIsLatest char(1)      
      
 select @uUserId=uUserId from t_cms_page where iPageId = @iPageId      
      
 declare cur_Workflow cursor for select uWorkflowStatusId,iPageDataId,vComment,cIsLatest from t_Cms_Page_AssignedWorkflowStatus where iPageDataId in(Select iPageDataId from t_CMS_Page_Data where iPageID =@iPageId)      
 open cur_Workflow       
 fetch next from cur_Workflow into @uWorkflowStatusId,@iPageDataID,@vCommnet,@cIsLatest      
 while @@FETCH_STATUS <>-1      
 begin      
 if(@cIsLatest='Y')      
  BEGIN      
   set @uUserId = @uNewUserId      
  END      
 insert into t_Cms_Page_AssignedWorkflowStatus (uTaskWorkflowStatusId, iPageDataId, uWorkflowStatusId, vComment, uUserId, dtCreatedOn, cIsLatest)      
  select newid(), iPageDataID,@uWorkflowStatusId,@vCommnet,@uUserId,GETDATE(),@cIsLatest from t_CMS_Page_Data where iPageID=@iNewTaskId and iLanguageID in(select iLanguageID from t_CMS_Page_Data where iPageDataID =@iPageDataID)      
       
 fetch next from cur_Workflow into  @uWorkflowStatusId,@iPageDataID,@vCommnet,@cIsLatest      
 end      
 close cur_Workflow      
 deallocate cur_Workflow      
                             
        SELECT  * FROM [t_CMS_Page] P                   
        inner join t_CMS_PageProperty_TestDrive PP on P.iPageId =PP.iPageId WHERE   P.iPageId = @iNewTaskId                                                                        
        SELECT  * FROM [t_CMS_PageProperty_TestDrive] WHERE   iPageId = @iNewTaskId                                 
        SELECT  * FROM [t_CMS_Page_Data] PD      
  inner join t_Cms_Page_AssignedWorkflowStatus WS on PD.iPageDataID = WS.iPageDataId                                                     
    SELECT  * FROM t_TestDrive_Test_TaskCalibration WHERE   iTaskId = @iNewTaskId                           
        SELECT  * FROM t_TestDrive_InputStatus where iInputStatusId =( select top 1 iInputStatusId from [t_CMS_PageProperty_TestDrive] WHERE   iPageId = @iNewTaskId)                                                   
        SELECT  * FROM t_TestDrive_Tasks_Type_Data where iTaskTypeId = (SELECT top 1 iTaskTypeId FROM [t_CMS_PageProperty_TestDrive] WHERE   iPageId = @iNewTaskId)                         
        select * from  t_TestDrive_Task_AssignedTaskDifficultyLevel P      
  inner join t_TestDrive_Task_TaskDifficultyLevel L on P.iTaskDifficultyLevelId = L.iTaskDifficultyLevelId      
  inner join t_TestDrive_Task_TaskDifficultyLevel_Data LD on L.iTaskDifficultyLevelId = LD.iTaskDifficultyLevelId      
   where iPageId = @iNewTaskId         
      
           if(@cIsShortCut='Y')      
     BEGIN      
     select * from  t_CMS_Page_Container where iPageId=  @iPageId  --container info of copied task       
     END      
      ELse      
   BEGIN      
   select * from  t_CMS_Page_Container where iPageId=  @iNewTaskId  --container info of copied task       
   END      
                              
  Commit 

  GO

  ALTER proc Proc_CMS_CMSAnimation3D_AddEditAnimation3DElement   
  
(     
  
    @iElementId int,   
  
    @iMainClientId int,  
  
    @iFolderId int,  
  
    @cIsDisplayedInElementTree char(1),   
  
    @uUserId uniqueidentifier,   
  
    @vAnimation3DName nvarchar(250),     
  
    @vAnimation3DDescription ntext,   
  
 @vFileName nvarchar(250),  
  
 @iFileSize int,  
  
 @iFileVersion int  
  
)                          
  
As                          
  
Begin                          
  
/********************************************************************************************      
 Created By: Arvind Sharma  
 Created Date: 21.01.2014  
 Description: Adds the Animation 3D Element                      
  
 Modified By: Arvind K                                       
 Modified Date: 12/08/2020                                     
 Description: Included column list for Insert Statement  
********************************************************************************************/                
  
  
  
declare @iElementAnimation3DId  int, @h int, @vAttributeName nvarchar(500), @iOrder int  
  
  
  
                                 
  
Declare @iNewElementId int                 
  
Insert into t_CMS_Element (iElementTypeId, iMainClientId, iFolderID, cIsDeleted, cIsDisplayedInElementTree, dtCreatedOn, dtModifiedOn, cIsSecure, uUserId, vElementSkinName, cIsQuestionPlaceholder)   
values(38,@iMainClientId,@iFolderId,'N',@cIsDisplayedInElementTree,GETDATE(),GETDATE(),'Y',@uUserId,NULL, 'N')          
  
set @iNewElementId =@@IDENTITY                
  
Insert into t_CMS_Element_Animation3D values(@iNewElementId,@vAnimation3DName,@vAnimation3DDescription, @vFileName,@iFileSize, @iFileVersion)      
  
set @iElementAnimation3DId = (select iElementAnimationId from t_CMS_Element_Animation where iElementId = @iNewElementId)    
  
select * from t_CMS_Element where iElementId =@iNewElementId                
  
select * from t_CMS_Element_Animation3D where iElementId =@iNewElementId                
  
END            
